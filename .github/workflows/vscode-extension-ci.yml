name: VSCode Extension CI

on:
  pull_request:
    types: [opened, synchronize]
    branches: [master]
    paths:
      - 'packages/x-fidelity-cli/**'
      - 'packages/x-fidelity-vscode/**'
      - 'packages/x-fidelity-core/**'
      - 'packages/x-fidelity-types/**'
      - 'packages/x-fidelity-plugins/**'
      - '.github/workflows/vscode-extension-ci.yml'
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean
      test_scenario:
        description: 'Test scenario to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'core-only'
          - 'vscode-only'
          - 'binary-discovery-only'

env:
  FORCE_COLOR: 1
  CI: true
  NODE_ENV: test

jobs:
  test-extension:
    name: VSCode Extension - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        vscode-version: ['stable']
        node-version: ['22.16.0']
        include:
          # Platform-specific test configurations
          - os: macos-latest
            test-homebrew: true
          - os: windows-latest
            test-program-files: true
          - os: ubuntu-latest
            test-comprehensive: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Build all packages
        run: yarn build
        
      - name: Setup headless environment (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          
      - name: Setup additional tools (Platform-specific)
        shell: bash
        run: |
          echo "=== Environment Setup for ${{ matrix.os }} ==="
          
          # Install yarn globally if not present
          if ! command -v yarn &> /dev/null; then
            npm install -g yarn
          fi
          
          # Platform-specific tool installations
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            npm install -g pnpm || true
          fi
          
          # Show environment for debugging
          echo "Node: $(node --version)"
          echo "NPM: $(npm --version)" 
          echo "Yarn: $(yarn --version)"
          which node npm yarn || true
          echo "PATH: $PATH"
          
      - name: Setup Homebrew environment (macOS)
        if: matrix.test-homebrew == true
        run: |
          echo "=== Homebrew Environment ==="
          if command -v brew &> /dev/null; then
            echo "Homebrew prefix: $(brew --prefix)"
            echo "Homebrew bin: $(brew --prefix)/bin"
            ls -la "$(brew --prefix)/bin" | grep -E "(node|npm|yarn)" || echo "No Node.js tools in Homebrew bin"
          else
            echo "Homebrew not available"
          fi
          
      - name: Setup Windows environment
        if: matrix.test-program-files == true
        shell: powershell
        run: |
          Write-Host "=== Windows Program Files ==="
          if (Test-Path "C:\Program Files\nodejs") {
            Write-Host "Node.js in Program Files:"
            Get-ChildItem "C:\Program Files\nodejs" | Select-Object Name
          } else {
            Write-Host "Node.js not in standard Program Files location"
          }
          
          # Show where Node.js is actually installed
          Write-Host "Actual Node.js location: $((Get-Command node).Source)"
          Write-Host "Actual NPM location: $((Get-Command npm).Source)"
          
      - name: Lint and type check extension
        run: |
          yarn workspace x-fidelity-vscode lint
          yarn workspace x-fidelity-vscode check-types
          
      - name: Build VSCode extension
        run: yarn workspace x-fidelity-vscode build
          
      - name: Run unit tests
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            xvfb-run -a yarn workspace x-fidelity-vscode test:unit
          else
            yarn workspace x-fidelity-vscode test:unit
          fi
        env:
          DEBUG: ${{ github.event.inputs.debug == 'true' && '*' || '' }}
          
      - name: Run core binary discovery tests
        if: github.event.inputs.test_scenario != 'vscode-only'
        run: |
          cd packages/x-fidelity-core
          yarn test:integration:binary
        env:
          DEBUG: ${{ github.event.inputs.debug == 'true' && '*' || '' }}
          TEST_SCENARIO: ${{ matrix.test-homebrew && 'homebrew' || matrix.test-program-files && 'program-files' || 'standard' }}
          
      - name: Test with custom NODE_PATH (Unix)
        if: matrix.os != 'windows-latest' && github.event.inputs.test_scenario != 'vscode-only'
        run: |
          # Create a custom Node.js installation simulation
          mkdir -p /tmp/custom-node/bin
          ln -sf "$(which node)" /tmp/custom-node/bin/node
          ln -sf "$(which npm)" /tmp/custom-node/bin/npm
          if command -v yarn &> /dev/null; then
            ln -sf "$(which yarn)" /tmp/custom-node/bin/yarn
          fi
          
          # Test discovery with custom path
          cd packages/x-fidelity-core
          JEST_INTEGRATION=true jest src/utils/binaryDiscovery.integration.test.ts --testNamePattern="override" --verbose --testTimeout=30000
        env:
          CUSTOM_NODE_PATH: /tmp/custom-node/bin
          
      - name: Test with custom NODE_PATH (Windows)
        if: matrix.os == 'windows-latest' && github.event.inputs.test_scenario != 'vscode-only'
        shell: powershell
        run: |
          # Create a custom Node.js installation simulation
          New-Item -ItemType Directory -Force -Path "C:\temp\custom-node\bin"
          Copy-Item "$(Get-Command node).Source" "C:\temp\custom-node\bin\node.exe"
          Copy-Item "$(Get-Command npm).Source" "C:\temp\custom-node\bin\npm.cmd"
          if (Get-Command yarn -ErrorAction SilentlyContinue) {
            Copy-Item "$(Get-Command yarn).Source" "C:\temp\custom-node\bin\yarn.cmd"
          }
          
          # Test discovery with custom path
          cd packages/x-fidelity-core
          $env:JEST_INTEGRATION = "true"
          yarn jest src/utils/binaryDiscovery.integration.test.ts --testNamePattern="override" --verbose --testTimeout=30000
        env:
          CUSTOM_NODE_PATH: C:\temp\custom-node\bin
          
      - name: Run VSCode binary discovery integration tests
        if: github.event.inputs.test_scenario != 'core-only'
        run: |
          cd packages/x-fidelity-vscode
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            xvfb-run -a yarn test:integration:binary --verbose
          else
            yarn test:integration:binary --verbose
          fi
        env:
          DEBUG: ${{ github.event.inputs.debug == 'true' && '*' || '' }}
          
      - name: Run VSCode setting override tests
        if: github.event.inputs.test_scenario != 'core-only'
        run: |
          cd packages/x-fidelity-vscode
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            xvfb-run -a yarn test:integration:vscode-setting --verbose
          else
            yarn test:integration:vscode-setting --verbose
          fi
          
      - name: Run comprehensive VSCode integration tests
        if: matrix.test-comprehensive == true && github.event.inputs.test_scenario != 'binary-discovery-only'
        run: |
          cd packages/x-fidelity-vscode
          xvfb-run -a yarn test:integration --verbose
        env:
          DEBUG: ${{ github.event.inputs.debug == 'true' && '*' || '' }}
          
      - name: Package extension
        run: yarn workspace x-fidelity-vscode package
          
      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension-${{ matrix.os }}-node-${{ matrix.node-version }}
          path: packages/x-fidelity-vscode/*.vsix
          retention-days: 7
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node-${{ matrix.node-version }}
          path: |
            packages/x-fidelity-vscode/.vscode-test/
            packages/x-fidelity-vscode/test-results/
            packages/x-fidelity-core/coverage/
          retention-days: 7
          
  publish-check:
    runs-on: ubuntu-latest
    needs: [test-extension]
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'publish-extension')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Build all packages
        run: yarn build
        
      - name: Build and package extension
        run: |
          yarn workspace x-fidelity-vscode build
          yarn workspace x-fidelity-vscode package
          
      - name: Verify extension package
        run: |
          cd packages/x-fidelity-vscode
          node scripts/verify-extension.js
          
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-release-candidate
          path: packages/x-fidelity-vscode/*.vsix
          retention-days: 30 