name: Release

on:
  push:
    branches: [master]

env:
  NODE_VERSION: '22.16.0'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      vscode: ${{ steps.filter.outputs.vscode }}
      cli: ${{ steps.filter.outputs.cli }}
      has_changes: ${{ steps.filter.outputs.vscode == 'true' || steps.filter.outputs.cli == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            vscode:
              - 'packages/x-fidelity-vscode/**'
              - 'packages/x-fidelity-core/**'
              - 'packages/x-fidelity-types/**'
              - 'packages/x-fidelity-plugins/**'
            cli:
              - 'packages/x-fidelity-cli/**'
              - 'packages/x-fidelity-core/**'
              - 'packages/x-fidelity-types/**'
              - 'packages/x-fidelity-plugins/**'
              - 'packages/x-fidelity-server/**'

  release-cli:
    needs: changes
    # Always run CLI release to ensure npm package exists for VSCode extension sync
    runs-on: ubuntu-latest
    outputs:
      cli-published: ${{ steps.cli-release.outputs.published }}
      cli-version: ${{ steps.cli-release.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Test with coverage
        run: yarn test:coverage

      - name: Check if CLI needs forced release
        id: check-force-release
        run: |
          cd packages/x-fidelity-cli
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current CLI version: $CURRENT_VERSION"
          
          # Check if we have actual changes that would trigger a release
          HAS_CLI_CHANGES="${{ needs.changes.outputs.cli }}"
          HAS_VSCODE_CHANGES="${{ needs.changes.outputs.vscode }}"
          
          echo "CLI changes: $HAS_CLI_CHANGES"
          echo "VSCode changes: $HAS_VSCODE_CHANGES"
          
          # If VSCode has changes but CLI doesn't, we need to force a CLI release
          if [[ "$HAS_VSCODE_CHANGES" == "true" && "$HAS_CLI_CHANGES" != "true" ]]; then
            echo "force_release=true" >> $GITHUB_OUTPUT
            echo "🚀 Forcing CLI release to keep in sync with VSCode extension"
          else
            echo "force_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Force CLI patch version if needed
        if: steps.check-force-release.outputs.force_release == 'true'
        run: |
          cd packages/x-fidelity-cli
          echo "🔧 Creating forced patch release for version sync"
          
          # Create a minimal commit to trigger semantic-release
          echo "sync version with extension" > .force-release-commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .force-release-commit
          git commit -m "sync version with extension"
          
          # Clean up the temporary file
          rm .force-release-commit
          git add .force-release-commit
          git commit -m "chore: cleanup force release marker"

      - name: Check if VSCode extension needs forced release
        id: check-vscode-sync
        run: |
          echo "🔍 Checking if VSCode extension needs forced release for CLI sync..."
          
          # Check if there are VSCode changes that would trigger a release
          VSCODE_CHANGES="${{ needs.changes.outputs.vscode }}"
          echo "VSCode changes detected: $VSCODE_CHANGES"
          
          # Check for conventional commits that would trigger VSCode release
          VSCODE_RELEASE_COMMITS="false"
          
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMIT_RANGE="$LAST_TAG..HEAD"
          else
            COMMIT_RANGE="HEAD"
          fi
          
          echo "Checking commit range: $COMMIT_RANGE"
          
          # Check each commit for VSCode-affecting conventional commits
          while read -r commit_msg; do
            if [ -z "$commit_msg" ]; then continue; fi
            echo "Checking commit: $commit_msg"
            
            # Check if commit message indicates a release-worthy change for VSCode
            if echo "$commit_msg" | grep -E '^(feat|fix|perf|revert|bump)(\(.*vscode.*\))?:' > /dev/null; then
              echo "Found VSCode release-triggering commit: $commit_msg"
              VSCODE_RELEASE_COMMITS="true"
              break
            elif echo "$commit_msg" | grep -i 'BREAKING CHANGE' > /dev/null; then
              echo "Found breaking change commit: $commit_msg"
              VSCODE_RELEASE_COMMITS="true"
              break
            fi
          done < <(git log --format=%s $COMMIT_RANGE)
          
          echo "VSCODE_RELEASE_COMMITS=$VSCODE_RELEASE_COMMITS" >> $GITHUB_OUTPUT
          
          # Determine if we need to force VSCode release
          # Force if CLI will get a release but VSCode won't
          CLI_CHANGES="${{ needs.changes.outputs.cli }}"
          CLI_FORCED="${{ steps.check-force-release.outputs.force_release }}"
          
          if [[ ("$CLI_CHANGES" == "true" || "$CLI_FORCED" == "true") && "$VSCODE_CHANGES" != "true" && "$VSCODE_RELEASE_COMMITS" != "true" ]]; then
            echo "CLI will get a release but VSCode won't - forcing VSCode sync"
            echo "FORCE_VSCODE_RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "VSCode will naturally get a release or no CLI release needed"
            echo "FORCE_VSCODE_RELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Force VSCode release for CLI sync
        if: steps.check-vscode-sync.outputs.FORCE_VSCODE_RELEASE == 'true'
        run: |
          echo "🚀 CLI will be released but no VSCode release triggers found"
          echo "🔄 Creating VSCode sync commit to maintain version synchronization"
          
          cd packages/x-fidelity-vscode
          
          # Configure git for the action
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create a minimal change to trigger semantic-release
          echo "# Version sync marker for CLI release - $(date)" > .cli-sync-marker
          git add .cli-sync-marker
          
          # Create conventional commit that will trigger a patch release
          git commit -m "bump: sync version with CLI release
          
          Automatic version sync to maintain compatibility with CLI release.
          This ensures both CLI and VSCode extension maintain synchronized version numbers."
          
          # Clean up the temporary file
          rm .cli-sync-marker
          git add .cli-sync-marker
          git commit -m "chore: cleanup CLI sync marker"
          
          echo "✅ Added VSCode sync commits for CLI synchronization"

      - name: Release CLI
        id: cli-release
        run: |
          cd packages/x-fidelity-cli
          
          # Run semantic-release and capture output
          yarn semantic-release > release-output.txt 2>&1 || true
          
          # Check if a release was published
          if grep -q "Published release" release-output.txt || grep -q "Publishing version" release-output.txt; then
            echo "published=true" >> $GITHUB_OUTPUT
            
            # Extract the published version
            PUBLISHED_VERSION=$(node -p "require('./package.json').version")
            echo "version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
            echo "✅ CLI published successfully: $PUBLISHED_VERSION"
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "❌ CLI release failed or no release needed"
            cat release-output.txt
            
            # If we forced a release, this is a critical failure
            if [[ "${{ steps.check-force-release.outputs.force_release }}" == "true" ]]; then
              echo "💥 CRITICAL: Forced CLI release failed - VSCode extension cannot proceed"
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Archive CLI build artifacts
        if: steps.cli-release.outputs.published == 'true'
        run: |
          CLI_VERSION="${{ steps.cli-release.outputs.version }}"
          echo "📦 Archiving CLI build artifacts for VSCode extension embedding"
          echo "   CLI Version: $CLI_VERSION"
          echo "   Skipping npm registry verification - using direct artifact copy instead"
          
          # Verify artifacts exist for upcoming VSCode embedding
          if [ ! -d "packages/x-fidelity-cli/dist" ]; then
            echo "❌ CRITICAL ERROR: CLI dist directory missing"
            echo "   This will cause VSCode extension embedding to fail"
            exit 1
          fi
          
          if [ ! -f "packages/x-fidelity-cli/dist/xfidelity" ]; then
            echo "❌ CRITICAL ERROR: CLI binary missing from dist"
            echo "   Available files:"
            ls -la packages/x-fidelity-cli/dist/ || echo "   No files found"
            exit 1
          fi
          
          echo "✅ CLI artifacts ready for VSCode extension embedding"
          echo "   Binary: packages/x-fidelity-cli/dist/xfidelity"
          echo "   Size: $(stat -f%z packages/x-fidelity-cli/dist/xfidelity 2>/dev/null || stat -c%s packages/x-fidelity-cli/dist/xfidelity) bytes"

  release-vscode-extension:
    needs: [changes, release-cli]
    # Only run if we have VSCode changes OR if CLI was successfully published
    if: needs.changes.outputs.vscode == 'true' || needs.release-cli.outputs.cli-published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Xvfb
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: Build
        run: yarn build:production

      - name: Test with coverage
        run: yarn test:coverage

      - name: Run integration tests
        run: xvfb-run -a yarn workspace x-fidelity-vscode test:ci

      - name: Sync and embed published CLI version
        if: needs.release-cli.outputs.cli-published == 'true'
        run: |
          CLI_VERSION="${{ needs.release-cli.outputs.cli-version }}"
          echo "🔄 Syncing VSCode extension with successfully published CLI version: $CLI_VERSION"
          echo "📍 Using direct artifact copy instead of npm registry dependency"
          
          # Verify CLI artifacts exist and are properly built
          echo "🔍 Verifying CLI build artifacts..."
          CLI_DIST_PATH="packages/x-fidelity-cli/dist"
          if [ ! -d "$CLI_DIST_PATH" ]; then
            echo "❌ CRITICAL ERROR: CLI dist directory not found at $CLI_DIST_PATH"
            echo "   This suggests the CLI build process failed during semantic-release"
            exit 1
          fi
          
          if [ ! -f "$CLI_DIST_PATH/xfidelity" ]; then
            echo "❌ CRITICAL ERROR: CLI binary not found at $CLI_DIST_PATH/xfidelity"
            echo "   Available files in CLI dist:"
            ls -la "$CLI_DIST_PATH/" || echo "   Directory listing failed"
            exit 1
          fi
          
          CLI_PKG_PATH="packages/x-fidelity-cli/package.json"
          if [ ! -f "$CLI_PKG_PATH" ]; then
            echo "❌ CRITICAL ERROR: CLI package.json not found at $CLI_PKG_PATH"
            exit 1
          fi
          
          # NOTE: Skip package.json version verification - semantic-release resets it after publishing
          # The CLI version from semantic-release output is the authoritative source
          ACTUAL_CLI_VERSION=$(node -p "require('./$CLI_PKG_PATH').version")
          echo "ℹ️  CLI package.json version after semantic-release: $ACTUAL_CLI_VERSION"
          echo "ℹ️  Published CLI version (authoritative): $CLI_VERSION"
          echo "ℹ️  Note: package.json version may be reset to placeholder after semantic-release completes"
          
          echo "✅ CLI artifacts verified successfully"
          echo "   Binary: $CLI_DIST_PATH/xfidelity"
          echo "   Package: $CLI_PKG_PATH"
          echo "   Version: $CLI_VERSION"
          
          # Update VSCode extension package.json version
          cd packages/x-fidelity-vscode
          echo "📝 Updating VSCode package.json version to $CLI_VERSION (local only, not committed)"
          
          # Use node to update the version atomically
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            const oldVersion = pkg.version;
            pkg.version = '$CLI_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log(\`   Updated: \${oldVersion} → $CLI_VERSION\`);
          " || {
            echo "❌ CRITICAL ERROR: Failed to update VSCode package.json version"
            exit 1
          }
          
          # Verify the version update worked
          VSCODE_VERSION=$(node -p "require('./package.json').version")
          if [ "$VSCODE_VERSION" != "$CLI_VERSION" ]; then
            echo "❌ CRITICAL ERROR: VSCode version sync verification failed"
            echo "   Expected: $CLI_VERSION"
            echo "   Found: $VSCODE_VERSION"
            exit 1
          fi
          
          echo "✅ VSCode package.json version updated successfully: $CLI_VERSION"
          
          # Clean any existing embedded CLI to ensure fresh embedding
          echo "🧹 Cleaning existing embedded CLI artifacts..."
          rm -rf dist/cli/* 2>/dev/null || true
          
          # Embed the freshly published CLI using direct file copy
          echo "📦 Embedding CLI v$CLI_VERSION using direct artifact copy..."
          yarn embed:cli || {
            echo "❌ CRITICAL ERROR: CLI embedding failed"
            echo "   This could indicate issues with the embed:cli script"
            echo "   or problems with the CLI build artifacts"
            exit 1
          }
          
          # Verify the embedded CLI version and integrity
          echo "🔍 Verifying embedded CLI artifacts..."
          
          if [ ! -f "dist/cli/index.js" ]; then
            echo "❌ CRITICAL ERROR: Embedded CLI main file not found"
            echo "   Expected: dist/cli/index.js"
            echo "   Available files in dist/cli/:"
            ls -la dist/cli/ 2>/dev/null || echo "   Directory does not exist or is empty"
            exit 1
          fi
          
          # Check if package.json was embedded correctly
          if [ -f "dist/cli/package.json" ]; then
            EMBEDDED_CLI_VERSION=$(node -p "require('./dist/cli/package.json').version" 2>/dev/null || echo "parse-error")
            if [ "$EMBEDDED_CLI_VERSION" != "$CLI_VERSION" ]; then
              echo "❌ CRITICAL ERROR: Embedded CLI version mismatch"
              echo "   Expected: $CLI_VERSION"
              echo "   Embedded: $EMBEDDED_CLI_VERSION"
              exit 1
            fi
            echo "✅ Embedded CLI package.json version verified: $CLI_VERSION"
          else
            echo "⚠️  WARNING: No package.json found in embedded CLI (may be expected depending on embedding strategy)"
          fi
          
          # Verify CLI binary is executable and has correct size
          CLI_BINARY_SIZE=$(stat -f%z "dist/cli/xfidelity" 2>/dev/null || stat -c%s "dist/cli/xfidelity" 2>/dev/null || echo "0")
          if [ "$CLI_BINARY_SIZE" -lt 1000000 ]; then  # Less than 1MB suggests incomplete binary
            echo "❌ CRITICAL ERROR: Embedded CLI binary appears incomplete"
            echo "   Binary size: $CLI_BINARY_SIZE bytes (expected >1MB)"
            exit 1
          fi
          
          echo "✅ CLI embedding completed and verified successfully"
          echo "   Version: $CLI_VERSION"
          echo "   Binary size: $CLI_BINARY_SIZE bytes"
          echo "   Artifacts: $(ls -1 dist/cli/ | wc -l) files embedded"

      - name: Release VSCode Extension
        run: |
          cd packages/x-fidelity-vscode
          
          # Comprehensive pre-publish verification
          echo "🔍 Pre-publish verification for VSCode extension..."
          
          # Check version synchronization
          VSCODE_VERSION=$(node -p "require('./package.json').version")
          CLI_VERSION="${{ needs.release-cli.outputs.cli-version }}"
          
          echo "   VSCode package.json version: $VSCODE_VERSION"
          echo "   Expected CLI version: $CLI_VERSION"
          
          if [ "$VSCODE_VERSION" = "0.0.0-semantically-released" ]; then
            echo "❌ CRITICAL ERROR: VSCode version still shows placeholder"
            echo "   This indicates the version sync step failed or was skipped"
            echo "   Possible causes:"
            echo "   1. CLI was not published (needs.release-cli.outputs.cli-published != 'true')"
            echo "   2. Version sync script failed silently"
            echo "   3. Package.json was not properly updated"
            echo ""
            echo "   Debug information:"
            echo "   - CLI published: ${{ needs.release-cli.outputs.cli-published }}"
            echo "   - CLI version: $CLI_VERSION"
            echo "   - Current working directory: $(pwd)"
            echo "   - Package.json exists: $([ -f package.json ] && echo 'yes' || echo 'no')"
            exit 1
          fi
          
          if [ -n "$CLI_VERSION" ] && [ "$VSCODE_VERSION" != "$CLI_VERSION" ]; then
            echo "❌ CRITICAL ERROR: Version mismatch between VSCode extension and published CLI"
            echo "   VSCode extension version: $VSCODE_VERSION"
            echo "   Published CLI version: $CLI_VERSION"
            echo "   This indicates a version sync failure"
            exit 1
          fi
          
          # Verify embedded CLI exists and is valid
          if [ ! -f "dist/cli/index.js" ]; then
            echo "❌ CRITICAL ERROR: Embedded CLI not found"
            echo "   Expected: dist/cli/index.js"
            echo "   This indicates CLI embedding failed"
            echo "   Available files in dist/:"
            ls -la dist/ 2>/dev/null || echo "   dist/ directory does not exist"
            exit 1
          fi
          
          # Check embedded CLI size (should be substantial)
          CLI_DIST_SIZE=$(du -sh dist/cli 2>/dev/null | cut -f1 || echo "unknown")
          echo "   Embedded CLI size: $CLI_DIST_SIZE"
          
          echo "✅ Pre-publish verification passed"
          echo "   Version: $VSCODE_VERSION"
          echo "   Embedded CLI: verified"
          echo "   Ready for publishing to VSCode Marketplace and Open VSX"
          
          # Proceed with publishing
          echo "🚀 Publishing VSCode extension..."
          yarn publish:universal || {
            echo "❌ CRITICAL ERROR: VSCode extension publishing failed"
            echo "   This could be due to:"
            echo "   1. Authentication issues (VSCE_PAT or OVSX_PAT)"
            echo "   2. Version conflicts on marketplace"
            echo "   3. Extension validation failures"
            echo "   4. Network connectivity issues"
            exit 1
          }
          
          echo "✅ VSCode extension published successfully!"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: x-fidelity-vscode
          path: packages/x-fidelity-vscode/*.vsix
          retention-days: 90
