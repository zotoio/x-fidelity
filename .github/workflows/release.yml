name: Release

on:
  push:
    branches: [master]

env:
  NODE_VERSION: '22.16.0'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      vscode: ${{ steps.filter.outputs.vscode }}
      cli: ${{ steps.filter.outputs.cli }}
      has_changes: ${{ steps.filter.outputs.vscode == 'true' || steps.filter.outputs.cli == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            vscode:
              - 'packages/x-fidelity-vscode/**'
              - 'packages/x-fidelity-core/**'
              - 'packages/x-fidelity-types/**'
              - 'packages/x-fidelity-plugins/**'
            cli:
              - 'packages/x-fidelity-cli/**'
              - 'packages/x-fidelity-core/**'
              - 'packages/x-fidelity-types/**'
              - 'packages/x-fidelity-plugins/**'
              - 'packages/x-fidelity-server/**'

  test-all-packages:
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint all packages
        run: yarn lint

      - name: Test all packages with coverage
        run: yarn test:coverage

      - name: Build CLI package
        run: |
          cd packages/x-fidelity-cli
          yarn build:production
          # Verify CLI binary was created
          if [[ ! -f "dist/xfidelity" ]]; then
            echo "‚ùå CRITICAL: CLI binary not created during build"
            exit 1
          fi
          echo "‚úÖ CLI build successful - binary created"

      - name: Build VSCode extension
        run: |
          cd packages/x-fidelity-vscode
          yarn build:production
          # Verify VSCode extension can be packaged
          yarn package
          if ! ls *.vsix > /dev/null 2>&1; then
            echo "‚ùå CRITICAL: VSCode VSIX package not created"
            exit 1
          fi
          echo "‚úÖ VSCode build successful - VSIX created"

      - name: Validate integration
        run: |
          echo "üîÑ Validating CLI-VSCode integration..."
          cd packages/x-fidelity-vscode
          yarn embed:cli
          if [[ ! -f "dist/cli/index.js" ]]; then
            echo "‚ùå CRITICAL: CLI embedding failed"
            exit 1
          fi
          echo "‚úÖ CLI-VSCode integration validated"

  release-cli:
    needs: [changes, test-all-packages]
    # Always run CLI release for synchronized versioning
    runs-on: ubuntu-latest
    outputs:
      cli-published: ${{ steps.cli-release.outputs.published }}
      cli-version: ${{ steps.cli-release.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Prepare synchronized release
        id: prepare-sync-release
        run: |
          echo "üîÑ Preparing synchronized release for both CLI and VSCode extension"
          
          # Get current changes
          HAS_CLI_CHANGES="${{ needs.changes.outputs.cli }}"
          HAS_VSCODE_CHANGES="${{ needs.changes.outputs.vscode }}"
          
          echo "CLI changes detected: $HAS_CLI_CHANGES"
          echo "VSCode changes detected: $HAS_VSCODE_CHANGES"
          
          # Configure git for synchronized commits
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Always ensure both packages can be released with synchronized versions
          
          # If CLI doesn't have changes, create a sync commit
          if [[ "$HAS_CLI_CHANGES" != "true" ]]; then
            echo "üîÑ Creating CLI sync commit for synchronized release"
            cd packages/x-fidelity-cli
            echo "# CLI sync for synchronized release - $(date)" > .sync-release-marker
            git add .sync-release-marker
            git commit -m "bump: synchronized release
            
            Maintains version synchronization between CLI and VSCode extension.
            Both packages are released together for consistent user experience."
            rm .sync-release-marker
            git add .sync-release-marker
            git commit -m "chore: cleanup sync release marker"
            cd ../..
            echo "‚úÖ CLI sync commit created"
          fi
          
          # If VSCode doesn't have changes, create a sync commit
          if [[ "$HAS_VSCODE_CHANGES" != "true" ]]; then
            echo "üîÑ Creating VSCode sync commit for synchronized release"
            cd packages/x-fidelity-vscode
            echo "# VSCode sync for synchronized release - $(date)" > .sync-release-marker
            git add .sync-release-marker
            git commit -m "bump: synchronized release
            
            Maintains version synchronization between CLI and VSCode extension.
            Both packages are released together for consistent user experience."
            rm .sync-release-marker
            git add .sync-release-marker
            git commit -m "chore: cleanup sync release marker"
            cd ../..
            echo "‚úÖ VSCode sync commit created"
          fi
          
          echo "‚úÖ Synchronized release preparation completed"



      - name: Release CLI
        id: cli-release
        run: |
          cd packages/x-fidelity-cli
          
          # Run semantic-release and capture output
          yarn semantic-release > release-output.txt 2>&1 || true
          
          # Check if a release was published
          if grep -q "Published release" release-output.txt || grep -q "Publishing version" release-output.txt; then
            echo "published=true" >> $GITHUB_OUTPUT
            
            # Extract the published version
            PUBLISHED_VERSION=$(node -p "require('./package.json').version")
            echo "version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ CLI published successfully: $PUBLISHED_VERSION"
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "‚ùå CLI release failed or no release needed"
            cat release-output.txt
            
            # If we forced a release, this is a critical failure
            if [[ "${{ steps.check-force-release.outputs.force_release }}" == "true" ]]; then
              echo "üí• CRITICAL: Forced CLI release failed - VSCode extension cannot proceed"
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Archive CLI build artifacts
        if: steps.cli-release.outputs.published == 'true'
        run: |
          CLI_VERSION="${{ steps.cli-release.outputs.version }}"
          echo "üì¶ Archiving CLI build artifacts for VSCode extension embedding"
          echo "   CLI Version: $CLI_VERSION"
          echo "   Skipping npm registry verification - using direct artifact copy instead"
          
          # Verify artifacts exist for upcoming VSCode embedding
          if [ ! -d "packages/x-fidelity-cli/dist" ]; then
            echo "‚ùå CRITICAL ERROR: CLI dist directory missing"
            echo "   This will cause VSCode extension embedding to fail"
            exit 1
          fi
          
          if [ ! -f "packages/x-fidelity-cli/dist/xfidelity" ]; then
            echo "‚ùå CRITICAL ERROR: CLI binary missing from dist"
            echo "   Available files:"
            ls -la packages/x-fidelity-cli/dist/ || echo "   No files found"
            exit 1
          fi
          
          echo "‚úÖ CLI artifacts ready for VSCode extension embedding"
          echo "   Binary: packages/x-fidelity-cli/dist/xfidelity"
          echo "   Size: $(stat -f%z packages/x-fidelity-cli/dist/xfidelity 2>/dev/null || stat -c%s packages/x-fidelity-cli/dist/xfidelity) bytes"

  release-vscode-extension:
    needs: [changes, test-all-packages, release-cli]
    # Always run VSCode release for synchronized versioning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Xvfb
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: Build
        run: yarn build:production

      - name: Test with coverage
        run: yarn test:coverage

      - name: Run integration tests
        run: xvfb-run -a yarn workspace x-fidelity-vscode test:ci

      - name: Handle VSCode-only release (no CLI changes)
        if: needs.release-cli.outputs.cli-published != 'true' && needs.changes.outputs.vscode == 'true'
        run: |
          echo "üîÑ Processing VSCode-only release (no CLI changes detected)"
          echo "üìç Using existing CLI artifacts without version sync"
          
          cd packages/x-fidelity-vscode
          
          # For VSCode-only releases, we use semantic-release to determine the version
          echo "‚ÑπÔ∏è  VSCode extension will be versioned independently using semantic-release"
          echo "‚ÑπÔ∏è  No CLI version sync needed - using existing embedded CLI"
          
          # Ensure embedded CLI exists from previous builds
          if [ ! -f "dist/cli/index.js" ]; then
            echo "üîß No existing embedded CLI found, using current CLI build..."
            # Build and embed current CLI
            cd ../../packages/x-fidelity-cli
            yarn build
            cd ../x-fidelity-vscode
            yarn embed:cli
          fi
          
          echo "‚úÖ VSCode-only release preparation completed"

      - name: Sync and embed published CLI version  
        if: needs.release-cli.outputs.cli-published == 'true'
        run: |
          CLI_VERSION="${{ needs.release-cli.outputs.cli-version }}"
          echo "üîÑ Syncing VSCode extension with successfully published CLI version: $CLI_VERSION"
          echo "üìç Using direct artifact copy instead of npm registry dependency"
          
          # Verify CLI artifacts exist and are properly built
          echo "üîç Verifying CLI build artifacts..."
          CLI_DIST_PATH="packages/x-fidelity-cli/dist"
          if [ ! -d "$CLI_DIST_PATH" ]; then
            echo "‚ùå CRITICAL ERROR: CLI dist directory not found at $CLI_DIST_PATH"
            echo "   This suggests the CLI build process failed during semantic-release"
            exit 1
          fi
          
          if [ ! -f "$CLI_DIST_PATH/xfidelity" ]; then
            echo "‚ùå CRITICAL ERROR: CLI binary not found at $CLI_DIST_PATH/xfidelity"
            echo "   Available files in CLI dist:"
            ls -la "$CLI_DIST_PATH/" || echo "   Directory listing failed"
            exit 1
          fi
          
          CLI_PKG_PATH="packages/x-fidelity-cli/package.json"
          if [ ! -f "$CLI_PKG_PATH" ]; then
            echo "‚ùå CRITICAL ERROR: CLI package.json not found at $CLI_PKG_PATH"
            exit 1
          fi
          
          # NOTE: Skip package.json version verification - semantic-release resets it after publishing
          # The CLI version from semantic-release output is the authoritative source
          ACTUAL_CLI_VERSION=$(node -p "require('./$CLI_PKG_PATH').version")
          echo "‚ÑπÔ∏è  CLI package.json version after semantic-release: $ACTUAL_CLI_VERSION"
          echo "‚ÑπÔ∏è  Published CLI version (authoritative): $CLI_VERSION"
          echo "‚ÑπÔ∏è  Note: package.json version may be reset to placeholder after semantic-release completes"
          
          echo "‚úÖ CLI artifacts verified successfully"
          echo "   Binary: $CLI_DIST_PATH/xfidelity"
          echo "   Package: $CLI_PKG_PATH"
          echo "   Version: $CLI_VERSION"
          
          # Update VSCode extension package.json version
          cd packages/x-fidelity-vscode
          echo "üìù Updating VSCode package.json version to $CLI_VERSION (local only, not committed)"
          
          # Use node to update the version atomically
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            const oldVersion = pkg.version;
            pkg.version = '$CLI_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log(\`   Updated: \${oldVersion} ‚Üí $CLI_VERSION\`);
          " || {
            echo "‚ùå CRITICAL ERROR: Failed to update VSCode package.json version"
            exit 1
          }
          
          # Verify the version update worked
          VSCODE_VERSION=$(node -p "require('./package.json').version")
          if [ "$VSCODE_VERSION" != "$CLI_VERSION" ]; then
            echo "‚ùå CRITICAL ERROR: VSCode version sync verification failed"
            echo "   Expected: $CLI_VERSION"
            echo "   Found: $VSCODE_VERSION"
            exit 1
          fi
          
          echo "‚úÖ VSCode package.json version updated successfully: $CLI_VERSION"
          
          # Clean any existing embedded CLI to ensure fresh embedding
          echo "üßπ Cleaning existing embedded CLI artifacts..."
          rm -rf dist/cli/* 2>/dev/null || true
          
          # Embed the freshly published CLI using direct file copy
          echo "üì¶ Embedding CLI v$CLI_VERSION using direct artifact copy..."
          yarn embed:cli || {
            echo "‚ùå CRITICAL ERROR: CLI embedding failed"
            echo "   This could indicate issues with the embed:cli script"
            echo "   or problems with the CLI build artifacts"
            exit 1
          }
          
          # Verify the embedded CLI version and integrity
          echo "üîç Verifying embedded CLI artifacts..."
          
          if [ ! -f "dist/cli/index.js" ]; then
            echo "‚ùå CRITICAL ERROR: Embedded CLI main file not found"
            echo "   Expected: dist/cli/index.js"
            echo "   Available files in dist/cli/:"
            ls -la dist/cli/ 2>/dev/null || echo "   Directory does not exist or is empty"
            exit 1
          fi
          
          # Check if package.json was embedded correctly
          if [ -f "dist/cli/package.json" ]; then
            EMBEDDED_CLI_VERSION=$(node -p "require('./dist/cli/package.json').version" 2>/dev/null || echo "parse-error")
            if [ "$EMBEDDED_CLI_VERSION" != "$CLI_VERSION" ]; then
              echo "‚ùå CRITICAL ERROR: Embedded CLI version mismatch"
              echo "   Expected: $CLI_VERSION"
              echo "   Embedded: $EMBEDDED_CLI_VERSION"
              exit 1
            fi
            echo "‚úÖ Embedded CLI package.json version verified: $CLI_VERSION"
          else
            echo "‚ö†Ô∏è  WARNING: No package.json found in embedded CLI (may be expected depending on embedding strategy)"
          fi
          
          # Verify CLI binary is executable and has correct size
          CLI_BINARY_SIZE=$(stat -f%z "dist/cli/xfidelity" 2>/dev/null || stat -c%s "dist/cli/xfidelity" 2>/dev/null || echo "0")
          if [ "$CLI_BINARY_SIZE" -lt 1000000 ]; then  # Less than 1MB suggests incomplete binary
            echo "‚ùå CRITICAL ERROR: Embedded CLI binary appears incomplete"
            echo "   Binary size: $CLI_BINARY_SIZE bytes (expected >1MB)"
            exit 1
          fi
          
          echo "‚úÖ CLI embedding completed and verified successfully"
          echo "   Version: $CLI_VERSION"
          echo "   Binary size: $CLI_BINARY_SIZE bytes"
          echo "   Artifacts: $(ls -1 dist/cli/ | wc -l) files embedded"

      - name: Release VSCode Extension
        run: |
          cd packages/x-fidelity-vscode
          
          # Comprehensive pre-publish verification
          echo "üîç Pre-publish verification for VSCode extension..."
          
          # Check version synchronization
          VSCODE_VERSION=$(node -p "require('./package.json').version")
          CLI_VERSION="${{ needs.release-cli.outputs.cli-version }}"
          
          echo "   VSCode package.json version: $VSCODE_VERSION"
          echo "   Expected CLI version: $CLI_VERSION"
          
          # Check if this is a VSCode-only release or a CLI-synced release
          if [ "${{ needs.release-cli.outputs.cli-published }}" = "true" ]; then
            # CLI was published, so VSCode version should be synced
            if [ "$VSCODE_VERSION" = "0.0.0-semantically-released" ]; then
              echo "‚ùå CRITICAL ERROR: VSCode version still shows placeholder after CLI sync"
              echo "   This indicates the version sync step failed"
              echo "   Debug information:"
              echo "   - CLI published: ${{ needs.release-cli.outputs.cli-published }}"
              echo "   - CLI version: $CLI_VERSION"
              echo "   - Current working directory: $(pwd)"
              echo "   - Package.json exists: $([ -f package.json ] && echo 'yes' || echo 'no')"
              exit 1
            fi
          else
            # VSCode-only release, placeholder version is expected and semantic-release will handle it
            if [ "$VSCODE_VERSION" = "0.0.0-semantically-released" ]; then
              echo "‚ÑπÔ∏è  VSCode-only release detected with placeholder version"
              echo "   This is expected - semantic-release will determine the actual version"
              echo "   Debug information:"
              echo "   - CLI published: ${{ needs.release-cli.outputs.cli-published }}"
              echo "   - VSCode changes: ${{ needs.changes.outputs.vscode }}"
              echo "   - Current version: $VSCODE_VERSION (will be updated by semantic-release)"
            fi
          fi
          
          # Only check version matching if CLI was actually published
          if [ "${{ needs.release-cli.outputs.cli-published }}" = "true" ] && [ -n "$CLI_VERSION" ] && [ "$VSCODE_VERSION" != "$CLI_VERSION" ]; then
            echo "‚ùå CRITICAL ERROR: Version mismatch between VSCode extension and published CLI"
            echo "   VSCode extension version: $VSCODE_VERSION"
            echo "   Published CLI version: $CLI_VERSION"
            echo "   This indicates a version sync failure"
            exit 1
          fi
          
          # Verify embedded CLI exists and is valid
          if [ ! -f "dist/cli/index.js" ]; then
            echo "‚ùå CRITICAL ERROR: Embedded CLI not found"
            echo "   Expected: dist/cli/index.js"
            echo "   This indicates CLI embedding failed"
            echo "   Available files in dist/:"
            ls -la dist/ 2>/dev/null || echo "   dist/ directory does not exist"
            exit 1
          fi
          
          # Check embedded CLI size (should be substantial)
          CLI_DIST_SIZE=$(du -sh dist/cli 2>/dev/null | cut -f1 || echo "unknown")
          echo "   Embedded CLI size: $CLI_DIST_SIZE"
          
          echo "‚úÖ Pre-publish verification passed"
          echo "   Version: $VSCODE_VERSION"
          echo "   Embedded CLI: verified"
          echo "   Ready for publishing to VSCode Marketplace and Open VSX"
          
          # Proceed with publishing
          echo "üöÄ Publishing VSCode extension..."
          yarn publish:universal || {
            echo "‚ùå CRITICAL ERROR: VSCode extension publishing failed"
            echo "   This could be due to:"
            echo "   1. Authentication issues (VSCE_PAT or OVSX_PAT)"
            echo "   2. Version conflicts on marketplace"
            echo "   3. Extension validation failures"
            echo "   4. Network connectivity issues"
            exit 1
          }
          
          echo "‚úÖ VSCode extension published successfully!"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: x-fidelity-vscode
          path: packages/x-fidelity-vscode/*.vsix
          retention-days: 90
