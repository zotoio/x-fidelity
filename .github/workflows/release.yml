name: Release

on:
  push:
    branches: [master]

env:
  NODE_VERSION: '22.16.0'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      vscode: ${{ steps.filter.outputs.vscode }}
      cli: ${{ steps.filter.outputs.cli }}
      has_changes: ${{ steps.filter.outputs.vscode == 'true' || steps.filter.outputs.cli == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            vscode:
              - 'packages/x-fidelity-vscode/**'
              - 'packages/x-fidelity-core/**'
              - 'packages/x-fidelity-types/**'
              - 'packages/x-fidelity-plugins/**'
            cli:
              - 'packages/x-fidelity-cli/**'
              - 'packages/x-fidelity-core/**'
              - 'packages/x-fidelity-types/**'
              - 'packages/x-fidelity-plugins/**'
              - 'packages/x-fidelity-server/**'

  release-cli:
    needs: changes
    # Always run CLI release to ensure npm package exists for VSCode extension sync
    runs-on: ubuntu-latest
    outputs:
      cli-published: ${{ steps.cli-release.outputs.published }}
      cli-version: ${{ steps.cli-release.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build:production

      - name: Test with coverage
        run: yarn test:coverage

      - name: Check if CLI needs forced release
        id: check-force-release
        run: |
          cd packages/x-fidelity-cli
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current CLI version: $CURRENT_VERSION"
          
          # Check if we have actual changes that would trigger a release
          HAS_CLI_CHANGES="${{ needs.changes.outputs.cli }}"
          HAS_VSCODE_CHANGES="${{ needs.changes.outputs.vscode }}"
          
          echo "CLI changes: $HAS_CLI_CHANGES"
          echo "VSCode changes: $HAS_VSCODE_CHANGES"
          
          # If VSCode has changes but CLI doesn't, we need to force a CLI release
          if [[ "$HAS_VSCODE_CHANGES" == "true" && "$HAS_CLI_CHANGES" != "true" ]]; then
            echo "force_release=true" >> $GITHUB_OUTPUT
            echo "üöÄ Forcing CLI release to keep in sync with VSCode extension"
          else
            echo "force_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Force CLI patch version if needed
        if: steps.check-force-release.outputs.force_release == 'true'
        run: |
          cd packages/x-fidelity-cli
          echo "üîß Creating forced patch release for version sync"
          
          # Create a minimal commit to trigger semantic-release
          echo "sync version with extension" > .force-release-commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .force-release-commit
          git commit -m "sync version with extension"
          
          # Clean up the temporary file
          rm .force-release-commit
          git add .force-release-commit
          git commit -m "chore: cleanup force release marker"

      - name: Check if VSCode extension needs forced release
        id: check-vscode-sync
        run: |
          echo "üîç Checking if VSCode extension needs forced release for CLI sync..."
          
          # Check if there are VSCode changes that would trigger a release
          VSCODE_CHANGES="${{ needs.changes.outputs.vscode }}"
          echo "VSCode changes detected: $VSCODE_CHANGES"
          
          # Check for conventional commits that would trigger VSCode release
          VSCODE_RELEASE_COMMITS="false"
          
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMIT_RANGE="$LAST_TAG..HEAD"
          else
            COMMIT_RANGE="HEAD"
          fi
          
          echo "Checking commit range: $COMMIT_RANGE"
          
          # Check each commit for VSCode-affecting conventional commits
          while read -r commit_msg; do
            if [ -z "$commit_msg" ]; then continue; fi
            echo "Checking commit: $commit_msg"
            
            # Check if commit message indicates a release-worthy change for VSCode
            if echo "$commit_msg" | grep -E '^(feat|fix|perf|revert|bump)(\(.*vscode.*\))?:' > /dev/null; then
              echo "Found VSCode release-triggering commit: $commit_msg"
              VSCODE_RELEASE_COMMITS="true"
              break
            elif echo "$commit_msg" | grep -i 'BREAKING CHANGE' > /dev/null; then
              echo "Found breaking change commit: $commit_msg"
              VSCODE_RELEASE_COMMITS="true"
              break
            fi
          done < <(git log --format=%s $COMMIT_RANGE)
          
          echo "VSCODE_RELEASE_COMMITS=$VSCODE_RELEASE_COMMITS" >> $GITHUB_OUTPUT
          
          # Determine if we need to force VSCode release
          # Force if CLI will get a release but VSCode won't
          CLI_CHANGES="${{ needs.changes.outputs.cli }}"
          CLI_FORCED="${{ steps.check-force-release.outputs.force_release }}"
          
          if [[ ("$CLI_CHANGES" == "true" || "$CLI_FORCED" == "true") && "$VSCODE_CHANGES" != "true" && "$VSCODE_RELEASE_COMMITS" != "true" ]]; then
            echo "CLI will get a release but VSCode won't - forcing VSCode sync"
            echo "FORCE_VSCODE_RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "VSCode will naturally get a release or no CLI release needed"
            echo "FORCE_VSCODE_RELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Force VSCode release for CLI sync
        if: steps.check-vscode-sync.outputs.FORCE_VSCODE_RELEASE == 'true'
        run: |
          echo "üöÄ CLI will be released but no VSCode release triggers found"
          echo "üîÑ Creating VSCode sync commit to maintain version synchronization"
          
          cd packages/x-fidelity-vscode
          
          # Configure git for the action
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create a minimal change to trigger semantic-release
          echo "# Version sync marker for CLI release - $(date)" > .cli-sync-marker
          git add .cli-sync-marker
          
          # Create conventional commit that will trigger a patch release
          git commit -m "bump: sync version with CLI release
          
          Automatic version sync to maintain compatibility with CLI release.
          This ensures both CLI and VSCode extension maintain synchronized version numbers."
          
          # Clean up the temporary file
          rm .cli-sync-marker
          git add .cli-sync-marker
          git commit -m "chore: cleanup CLI sync marker"
          
          echo "‚úÖ Added VSCode sync commits for CLI synchronization"

      - name: Release CLI
        id: cli-release
        run: |
          cd packages/x-fidelity-cli
          
          # Run semantic-release and capture output
          yarn semantic-release > release-output.txt 2>&1 || true
          
          # Check if a release was published
          if grep -q "Published release" release-output.txt || grep -q "Publishing version" release-output.txt; then
            echo "published=true" >> $GITHUB_OUTPUT
            
            # Extract the published version
            PUBLISHED_VERSION=$(node -p "require('./package.json').version")
            echo "version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ CLI published successfully: $PUBLISHED_VERSION"
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "‚ùå CLI release failed or no release needed"
            cat release-output.txt
            
            # If we forced a release, this is a critical failure
            if [[ "${{ steps.check-force-release.outputs.force_release }}" == "true" ]]; then
              echo "üí• CRITICAL: Forced CLI release failed - VSCode extension cannot proceed"
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify CLI package availability
        if: steps.cli-release.outputs.published == 'true'
        run: |
          CLI_VERSION="${{ steps.cli-release.outputs.version }}"
          echo "üîç Verifying CLI package x-fidelity@$CLI_VERSION is available on npm..."
          
          # Wait a moment for npm registry propagation
          sleep 10
          
          # Try to fetch the package info
          for i in {1..12}; do
            if npm view x-fidelity@$CLI_VERSION version; then
              echo "‚úÖ CLI package x-fidelity@$CLI_VERSION confirmed available on npm"
              break
            else
              echo "‚è≥ Waiting for npm registry propagation... (attempt $i/12)"
              sleep 10
            fi
            
            if [ $i -eq 12 ]; then
              echo "‚ùå Failed to verify CLI package availability after 2 minutes"
              exit 1
            fi
          done

  release-vscode-extension:
    needs: [changes, release-cli]
    # Only run if we have VSCode changes OR if CLI was successfully published
    if: needs.changes.outputs.vscode == 'true' || needs.release-cli.outputs.cli-published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Xvfb
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: Build
        run: yarn build:production

      - name: Test with coverage
        run: yarn test:coverage

      - name: Run integration tests
        run: xvfb-run -a yarn workspace x-fidelity-vscode test:ci

      - name: Sync with published CLI version
        if: needs.release-cli.outputs.cli-published == 'true'
        run: |
          CLI_VERSION="${{ needs.release-cli.outputs.cli-version }}"
          echo "üîÑ Syncing VSCode extension with published CLI version: $CLI_VERSION"
          
          cd packages/x-fidelity-vscode
          
          # CRITICAL: This sync happens in working directory only, NOT committed to git
          echo "üìù Updating package.json version locally (not committed)"
          node scripts/sync-published-version.js --cli-version="$CLI_VERSION"
          
          # Verify the sync worked
          VSCODE_VERSION=$(node -p "require('./package.json').version")
          if [ "$VSCODE_VERSION" != "$CLI_VERSION" ]; then
            echo "‚ùå CRITICAL: Version sync failed"
            echo "   Expected: $CLI_VERSION"
            echo "   Got: $VSCODE_VERSION"
            exit 1
          fi
          
          echo "‚úÖ Version sync verified: $CLI_VERSION"
          echo "üîí Note: package.json changes are local only - not committed to git"

      - name: Release VSCode Extension
        run: |
          cd packages/x-fidelity-vscode
          
          # Verify versions are still synchronized before publishing
          VSCODE_VERSION=$(node -p "require('./package.json').version")
          echo "üîç Pre-publish version check: $VSCODE_VERSION"
          
          if [ "$VSCODE_VERSION" = "0.0.0-semantically-released" ]; then
            echo "‚ùå CRITICAL: Version still shows placeholder - sync failed"
            exit 1
          fi
          
          # Proceed with publishing - validation will enforce sync
          yarn publish:universal
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: x-fidelity-vscode
          path: packages/x-fidelity-vscode/*.vsix
          retention-days: 90
