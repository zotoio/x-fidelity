{
  "name": "x-fidelity-vscode",
  "displayName": "X-Fidelity Analyzer",
  "description": "Provides X-Fidelity software architectural analysis within VS Code",
  "version": "0.0.1",
  "publisher": "zotoio",
  "private": true,
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/zotoio/x-fidelity.git"
  },
  "engines": {
    "vscode": "^1.101.0",
    "node": ">=22.16.0"
  },
  "categories": [
    "Linters",
    "Programming Languages"
  ],
  "activationEvents": [
    "onStartupFinished",
    "workspaceContains:**/package.json",
    "workspaceContains:**/pom.xml",
    "workspaceContains:**/build.gradle",
    "workspaceContains:**/requirements.txt",
    "workspaceContains:**/*.csproj"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "xfidelity.test",
        "title": "X-Fidelity: Test Extension"
      },
      {
        "command": "xfidelity.runAnalysis",
        "title": "X-Fidelity: Run Analysis Now"
      },
      {
        "command": "xfidelity.cancelAnalysis",
        "title": "X-Fidelity: Cancel Analysis",
        "icon": "$(stop)"
      },
      {
        "command": "xfidelity.runAnalysisWithDir",
        "title": "X-Fidelity: Debug Analysis with --dir"
      },
      {
        "command": "xfidelity.openSettings",
        "title": "X-Fidelity: Open Settings"
      },
      {
        "command": "xfidelity.openReports",
        "title": "X-Fidelity: Open Reports Folder"
      },
      {
        "command": "xfidelity.detectArchetype",
        "title": "X-Fidelity: Detect Project Archetype"
      },
      {
        "command": "xfidelity.resetConfiguration",
        "title": "X-Fidelity: Reset Configuration"
      },
      {
        "command": "xfidelity.showReportHistory",
        "title": "X-Fidelity: Show Report History"
      },
      {
        "command": "xfidelity.addExemption",
        "title": "X-Fidelity: Add Exemption"
      },
      {
        "command": "xfidelity.addBulkExemptions",
        "title": "X-Fidelity: Add Bulk Exemptions"
      },
      {
        "command": "xfidelity.showRuleDocumentation",
        "title": "X-Fidelity: Show Rule Documentation"
      },
      {
        "command": "xfidelity.showReportHistory",
        "title": "X-Fidelity: Show Report History"
      },
      {
        "command": "xfidelity.exportReport",
        "title": "X-Fidelity: Export Report"
      },
      {
        "command": "xfidelity.shareReport",
        "title": "X-Fidelity: Share Report"
      },
      {
        "command": "xfidelity.compareReports",
        "title": "X-Fidelity: Compare Reports"
      },
      {
        "command": "xfidelity.viewTrends",
        "title": "X-Fidelity: View Trends"
      },
      {
        "command": "xfidelity.showAdvancedSettings",
        "title": "X-Fidelity: Advanced Settings"
      },
      {
        "command": "xfidelity.showDashboard",
        "title": "X-Fidelity: Show Dashboard"
      },
      {
        "command": "xfidelity.showIssueExplorer",
        "title": "X-Fidelity: Issue Explorer"
      },
      {
        "command": "xfidelity.showControlCenter",
        "title": "X-Fidelity: Control Center",
        "icon": "$(settings-gear)"
      },
      {
        "command": "xfidelity.showOutput",
        "title": "X-Fidelity: Show Output Channel",
        "icon": "$(output)"
      },
      {
        "command": "xfidelity.refreshIssuesTree",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "xfidelity.issuesTreeGroupBySeverity",
        "title": "Group by Severity",
        "icon": "$(symbol-color)"
      },
      {
        "command": "xfidelity.issuesTreeGroupByRule",
        "title": "Group by Rule",
        "icon": "$(symbol-method)"
      },
      {
        "command": "xfidelity.issuesTreeGroupByFile",
        "title": "Group by File",
        "icon": "$(symbol-file)"
      },
      {
        "command": "xfidelity.issuesTreeGroupByCategory",
        "title": "Group by Category",
        "icon": "$(symbol-class)"
      },
      {
        "command": "xfidelity.goToIssue",
        "title": "Go to Issue",
        "icon": "$(go-to-file)"
      },
      {
        "command": "xfidelity.addIssueExemption",
        "title": "Add Exemption",
        "icon": "$(circle-slash)"
      },
      {
        "command": "xfidelity.showIssueRuleInfo",
        "title": "Show Rule Info",
        "icon": "$(info)"
      }
    ],
    "configuration": {
      "title": "X-Fidelity",
      "properties": {
        "xfidelity.runInterval": {
          "type": "number",
          "default": 0,
          "description": "Interval (in seconds) for running background analysis. Set to 0 to disable periodic runs. WARNING: Setting this to low values can cause performance issues."
        },
        "xfidelity.autoAnalyzeOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Automatically run analysis when files are saved. WARNING: This can cause performance issues with frequent saves."
        },
        "xfidelity.autoAnalyzeOnFileChange": {
          "type": "boolean",
          "default": false,
          "description": "Automatically run analysis when files are changed (debounced). WARNING: This can cause performance issues with frequent file changes."
        },
        "xfidelity.archetype": {
          "type": "string",
          "default": "node-fullstack",
          "enum": [
            "node-fullstack",
            "react-spa",
            "java-microservice",
            "python-service",
            "dotnet-service"
          ],
          "description": "The X-Fidelity archetype to use for analysis."
        },
        "xfidelity.configServer": {
          "type": "string",
          "default": "",
          "description": "URL of the X-Fidelity config server (optional)."
        },
        "xfidelity.localConfigPath": {
          "type": "string",
          "default": "",
          "description": "Path to local X-Fidelity configuration (relative to workspace root, optional)."
        },
        "xfidelity.openaiEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable OpenAI analysis for advanced code insights (requires API key)."
        },
        "xfidelity.telemetryCollector": {
          "type": "string",
          "default": "",
          "description": "URL where telemetry data will be sent (optional)."
        },
        "xfidelity.telemetryEnabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable telemetry collection for usage analytics."
        },
        "xfidelity.generateReports": {
          "type": "boolean",
          "default": true,
          "description": "Automatically generate reports after analysis."
        },
        "xfidelity.reportOutputDir": {
          "type": "string",
          "default": "",
          "description": "Directory for report output (default: workspace root)."
        },
        "xfidelity.reportFormats": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "json",
              "md",
              "html",
              "csv"
            ]
          },
          "default": [
            "json",
            "md"
          ],
          "description": "Report formats to generate."
        },
        "xfidelity.showReportAfterAnalysis": {
          "type": "boolean",
          "default": false,
          "description": "Automatically open reports after generation."
        },
        "xfidelity.reportRetentionDays": {
          "type": "number",
          "default": 30,
          "description": "Number of days to keep old reports."
        },
        "xfidelity.showInlineDecorations": {
          "type": "boolean",
          "default": true,
          "description": "Show inline decorations (squiggly lines) for issues."
        },
        "xfidelity.highlightSeverity": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "error",
              "warning",
              "info",
              "hint"
            ]
          },
          "default": [
            "error",
            "warning"
          ],
          "description": "Which issue severities to highlight."
        },
        "xfidelity.statusBarVisibility": {
          "type": "boolean",
          "default": true,
          "description": "Show X-Fidelity status in the status bar."
        },
        "xfidelity.problemsPanelGrouping": {
          "type": "string",
          "enum": [
            "file",
            "severity",
            "rule",
            "category"
          ],
          "default": "file",
          "description": "How to group issues in the Problems panel."
        },
        "xfidelity.showRuleDocumentation": {
          "type": "boolean",
          "default": true,
          "description": "Show rule documentation in hover tooltips."
        },
        "xfidelity.maxFileSize": {
          "type": "number",
          "default": 1048576,
          "description": "Maximum file size to analyze (in bytes)."
        },
        "xfidelity.analysisTimeout": {
          "type": "number",
          "default": 30000,
          "description": "Analysis timeout in milliseconds."
        },
        "xfidelity.excludePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "node_modules/**",
            ".git/**"
          ],
          "description": "Glob patterns for files to exclude from analysis."
        },
        "xfidelity.includePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Glob patterns for files to include in analysis (empty = all)."
        },
        "xfidelity.maxConcurrentAnalysis": {
          "type": "number",
          "default": 3,
          "description": "Maximum number of concurrent analysis operations."
        },
        "xfidelity.debugMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug logging for troubleshooting."
        },
        "xfidelity.customPlugins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Paths to custom X-Fidelity plugins."
        },
        "xfidelity.ruleOverrides": {
          "type": "object",
          "default": {},
          "description": "Rule-specific configuration overrides."
        },
        "xfidelity.cacheResults": {
          "type": "boolean",
          "default": true,
          "description": "Cache analysis results for better performance."
        },
        "xfidelity.cacheTTL": {
          "type": "number",
          "default": 5,
          "description": "Cache time-to-live in minutes."
        },
        "xfidelity.performance.maxConcurrentOperations": {
          "type": "number",
          "default": 2,
          "description": "Maximum number of concurrent analysis operations"
        },
        "xfidelity.performance.enableDetailedLogging": {
          "type": "boolean",
          "default": false,
          "description": "Enable detailed performance logging (may impact performance)"
        },
        "xfidelity.performance.astCacheSize": {
          "type": "number",
          "default": 100,
          "description": "Maximum number of AST trees to cache"
        },
        "xfidelity.performance.decorationLimit": {
          "type": "number",
          "default": 100,
          "description": "Maximum number of inline decorations per file"
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "xfidelity",
          "title": "X-Fidelity",
          "icon": "$(zap)"
        }
      ]
    },
    "views": {
      "xfidelity": [
        {
          "icon": "$(warning)",
          "id": "xfidelityIssuesTreeView",
          "name": "Issues",
          "when": "true",
          "visibility": "visible"
        },
        {
          "icon": "$(dashboard)",
          "id": "xfidelityControlCenterView",
          "name": "Control Center",
          "when": "true",
          "visibility": "visible"
        }
      ],
      "explorer": [
        {
          "icon": "$(warning)",
          "id": "xfidelityIssuesTreeViewExplorer",
          "name": "X-Fidelity Issues",
          "when": "true",
          "visibility": "collapsed"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "xfidelity.refreshIssuesTree",
          "when": "view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer",
          "group": "navigation@1"
        },
        {
          "command": "xfidelity.cancelAnalysis",
          "when": "(view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer) && xfidelity.analysisRunning",
          "group": "navigation@2"
        },
        {
          "command": "xfidelity.showControlCenter",
          "when": "view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer",
          "group": "navigation@3"
        },
        {
          "command": "xfidelity.issuesTreeGroupBySeverity",
          "when": "view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer",
          "group": "1_grouping@1"
        },
        {
          "command": "xfidelity.issuesTreeGroupByRule",
          "when": "view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer",
          "group": "1_grouping@2"
        },
        {
          "command": "xfidelity.issuesTreeGroupByFile",
          "when": "view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer",
          "group": "1_grouping@3"
        },
        {
          "command": "xfidelity.issuesTreeGroupByCategory",
          "when": "view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer",
          "group": "1_grouping@4"
        }
      ],
      "commandPalette": [
        {
          "command": "xfidelity.cancelAnalysis",
          "when": "xfidelity.analysisRunning"
        }
      ],
      "view/item/context": [
        {
          "command": "xfidelity.goToIssue",
          "when": "(view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer) && viewItem == issue",
          "group": "navigation@1"
        },
        {
          "command": "xfidelity.addIssueExemption",
          "when": "(view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer) && viewItem == issue",
          "group": "1_actions@1"
        },
        {
          "command": "xfidelity.showIssueRuleInfo",
          "when": "(view == xfidelityIssuesTreeView || view == xfidelityIssuesTreeViewExplorer) && viewItem == issue",
          "group": "1_actions@2"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "xfidelityIssuesTreeView",
        "contents": "Welcome to X-Fidelity! 🚀\n\nNo issues found yet. Run analysis to detect architectural problems in your code.\n\n[Run Analysis](command:xfidelity.runAnalysis)\n\n[Open Control Center](command:xfidelity.showControlCenter)\n\n[Configure Settings](command:xfidelity.openSettings)"
      },
      {
        "view": "xfidelityIssuesTreeViewExplorer",
        "contents": "No X-Fidelity issues found! ✅\n\n[Run Analysis](command:xfidelity.runAnalysis)\n\n[View Dashboard](command:xfidelity.showDashboard)"
      },
      {
        "view": "xfidelityControlCenterView",
        "contents": "X-Fidelity Control Center 🎛️\n\nManage your code analysis from here.\n\n[Run Analysis](command:xfidelity.runAnalysis)\n\n[Open Settings](command:xfidelity.openSettings)\n\n[View Documentation](https://github.com/zotoio/x-fidelity)"
      }
    ]
  },
  "dependencies": {
    "@x-fidelity/core": "4.0.0",
    "@x-fidelity/democonfig": "4.0.0",
    "@x-fidelity/plugins": "4.0.0",
    "@x-fidelity/types": "4.0.0",
    "tree-sitter-javascript": "^0.23.1",
    "tree-sitter-typescript": "^0.23.2",
    "vscode-languageclient": "^9.0.1",
    "web-tree-sitter": "^0.25.6",
    "yarn": "^1.22.22"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "^22.x",
    "@types/vscode": "^1.101.0",
    "@typescript-eslint/eslint-plugin": "^8.35.0",
    "@typescript-eslint/parser": "^8.35.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.0",
    "esbuild": "^0.25.5",
    "eslint": "^9.29.0",
    "glob": "11.0.3",
    "mocha": "^11.7.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^3.6.1",
    "rimraf": "^6.0.1",
    "typescript": "^5.8.3"
  },
  "optionalDependencies": {
    "scrot": "^1.0.0"
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "npm run build",
    "build": "node --no-warnings=ExperimentalWarning esbuild.config.js",
    "dev": "node --no-warnings=ExperimentalWarning esbuild.config.js --dev",
    "watch": "node --no-warnings=ExperimentalWarning esbuild.config.js --watch",
    "package": "npm run build && vsce package --yarn",
    "pretest": "npm run compile && npm run lint && npm run clean:test-artifacts && mkdir -p ./vscode-test-user-data",
    "test": "yarn lint:fix && xvfb-run -a --server-args='-screen 0 1920x1080x24 -ac +extension GLX +render -noreset -nolisten tcp' vscode-test --config .vscode-test.mjs --label allTests ./out/test/suite/index.js",
    "test:unit": "mkdir -p ./vscode-test-user-data && xvfb-run -a --server-args='-screen 0 1920x1080x24 -ac +extension GLX +render -noreset -nolisten tcp' vscode-test --config .vscode-test.mjs --label=unitTests ./out/test/suite/index.js",
    "test:screenshots": "mkdir -p ./vscode-test-user-data && SCREENSHOTS=true xvfb-run -a --server-args='-screen 0 1920x1080x24 -ac +extension GLX +render -noreset -nolisten tcp' vscode-test --config .vscode-test.mjs --label=comprehensiveTests ./out/test/suite/index.js",
    "test:ci": "mkdir -p ./.vscode-test-user-data && xvfb-run -a --server-args='-screen 0 1920x1080x24 -ac +extension GLX +render -noreset -nolisten tcp' vscode-test --config .vscode-test.mjs --label allTests ./out/test/suite/index.js",
    "test:debug": "yarn build:test && code --extensionDevelopmentPath=. --extensionTestsPath=./out/test/suite",
    "lint": "eslint src --ext ts && prettier --check src/**/*.ts",
    "lint:fix": "eslint src --ext ts --fix && prettier --write src/**/*.ts",
    "format": "prettier --write src/**/*.ts",
    "format:check": "prettier --check src/**/*.ts",
    "build:production": "npm run check-types && node --no-warnings=ExperimentalWarning esbuild.config.js --production",
    "check-types": "tsc --noEmit",
    "build:test": "tsc -p tsconfig.test.json",
    "clean": "rimraf dist dist-test config *.tsbuildinfo .vscode-test .vscode-test-profile",
    "clean:test-artifacts": "rm -rf .vscode-test/user-data/Crashpad/pending/*.lock .vscode-test/user-data/logs/* ./.vscode-test-user-data || true",
    "publish": "npm run package && vsce publish",
    "install-vsix": "code --install-extension *.vsix",
    "dev:build": "yarn clean && yarn build:deps && tsc && node --no-warnings=ExperimentalWarning esbuild.config.js",
    "build:deps": "cd ../../ && yarn build",
    "dev:fresh": "yarn dev:build && code --extensionDevelopmentPath=. --new-window --user-data-dir=./.vscode-test-profile .",
    "dev:watch": "yarn dev:build && (yarn watch &) && sleep 2 && code --extensionDevelopmentPath=. --new-window .",
    "dev:complete": "./scripts/dev-complete.sh",
    "test:integration": "mkdir -p ./.vscode-test-user-data && xvfb-run -a --server-args='-screen 0 1920x1080x24 -ac +extension GLX +render -noreset -nolisten tcp' vscode-test --config .vscode-test.mjs --label integrationTests ./out/test/suite/index.js",
    "test:e2e": "mkdir -p ./.vscode-test-user-data && xvfb-run -a --server-args='-screen 0 1920x1080x24 -ac +extension GLX +render -noreset -nolisten tcp' vscode-test --config .vscode-test.mjs --label e2eTests ./out/test/suite/index.js",
    "test:consistency": "mkdir -p ./.vscode-test-user-data && xvfb-run -a --server-args='-screen 0 1920x1080x24 -ac +extension GLX +render -noreset -nolisten tcp' vscode-test --config .vscode-test.mjs --label consistencyTests ./out/test/suite/index.js",
    "test:all": "yarn test:unit && yarn test:integration && yarn test:e2e && yarn test:consistency",
    "test:watch": "mkdir -p ./.vscode-test-user-data && xvfb-run -a --server-args='-screen 0 1920x1080x24 -ac +extension GLX +render -noreset -nolisten tcp' vscode-test --config .vscode-test.mjs --label unitTests --watch ./out/test/suite/index.js",
    "debug": "yarn dev:build && code --extensionDevelopmentPath=. --new-window --enable-proposed-api",
    "logs": "echo 'Check VSCode Output panel > X-Fidelity Debug for logs'",
    "verify:all": "node scripts/verify-extension.js",
    "verify:dev": "yarn dev:build && node scripts/verify-extension.js",
    "verify:ci": "yarn build && node scripts/verify-extension.js",
    "verify:extension": "node scripts/verify-extension.js",
    "verify:quick": "yarn build:test && yarn test:unit && yarn verify:extension",
    "quick-start": "echo '🚀 Quick Start: Press F5 to launch extension, then Ctrl+Shift-P > X-Fidelity: Control Center'",
    "help": "echo '📖 Development Help:\n  yarn dev - Start development\n  yarn dev:fresh - Fresh profile\n  yarn test:all - Run tests\n  F5 in VSCode - Debug launch\n  yarn verify:all - Full verification'"
  }
}
