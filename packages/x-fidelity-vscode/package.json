{
  "name": "x-fidelity-vscode",
  "displayName": "X-Fidelity",
  "description": "VSCode extension for X-Fidelity code quality analysis with real-time diagnostics, comprehensive UI integration, and improved CLI embedding",
  "version": "5.3.0",
  "publisher": "zotoio",
  "private": true,
  "license": "MIT",
  "icon": "icons/x-fidelity-icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/zotoio/x-fidelity.git"
  },
  "engines": {
    "vscode": "^1.99.0",
    "node": ">=22.16.0"
  },
  "categories": [
    "Linters",
    "Programming Languages"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onLanguage:typescript",
    "onLanguage:javascript",
    "onLanguage:java",
    "onLanguage:python",
    "onLanguage:csharp"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "xfidelity.runAnalysis",
        "title": "X-Fidelity: Run Analysis Now",
        "icon": "$(play)"
      },
      {
        "command": "xfidelity.cancelAnalysis",
        "title": "X-Fidelity: Cancel Analysis",
        "icon": "$(stop)"
      },
      {
        "command": "xfidelity.showControlCenter",
        "title": "X-Fidelity: Control Center",
        "icon": "$(settings-gear)"
      },
      {
        "command": "xfidelity.openSettings",
        "title": "X-Fidelity: Open Settings",
        "icon": "$(gear)"
      },
      {
        "command": "xfidelity.showOutput",
        "title": "X-Fidelity: Show Output Channel",
        "icon": "$(output)"
      },
      {
        "command": "xfidelity.refreshIssuesTree",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "xfidelity.forceRefreshWithDiagnostics",
        "title": "X-Fidelity: Force Refresh (Clear Cache & Debug)",
        "icon": "$(debug-refresh)"
      },
      {
        "command": "xfidelity.issuesTreeGroupBySeverity",
        "title": "Group by Severity",
        "icon": "$(symbol-operator)"
      },
      {
        "command": "xfidelity.issuesTreeGroupByRule",
        "title": "Group by Rule",
        "icon": "$(symbol-rule)"
      },
      {
        "command": "xfidelity.issuesTreeGroupByFile",
        "title": "Group by File",
        "icon": "$(symbol-file)"
      },
      {
        "command": "xfidelity.issuesTreeGroupByCategory",
        "title": "Group by Category",
        "icon": "$(symbol-namespace)"
      },
      {
        "command": "xfidelity.goToIssue",
        "title": "Go to Issue",
        "icon": "$(go-to-file)"
      },
      {
        "command": "xfidelity.addIssueExemption",
        "title": "Add Exemption",
        "icon": "$(circle-slash)"
      },
      {
        "command": "xfidelity.showIssueRuleInfo",
        "title": "Show Rule Info",
        "icon": "$(info)"
      },
      {
        "command": "xfidelity.showDashboard",
        "title": "X-Fidelity: Dashboard",
        "icon": "$(dashboard)"
      },
      {
        "command": "xfidelity.showReportHistory",
        "title": "X-Fidelity: Report History",
        "icon": "$(history)"
      },
      {
        "command": "xfidelity.exportReport",
        "title": "X-Fidelity: Export Report",
        "icon": "$(export)"
      },
      {
        "command": "xfidelity.resetConfiguration",
        "title": "X-Fidelity: Reset Configuration",
        "icon": "$(trash)"
      },
      {
        "command": "xfidelity.resetToDefaults",
        "title": "X-Fidelity: Reset All Settings",
        "icon": "$(clear-all)"
      },
      {
        "command": "xfidelity.test",
        "title": "X-Fidelity: Test Extension",
        "icon": "$(beaker)"
      },
      {
        "command": "xfidelity.getTestResults",
        "title": "X-Fidelity: Get Test Results",
        "icon": "$(json)"
      },
      {
        "command": "xfidelity.showPerformanceMetrics",
        "title": "X-Fidelity: Show Performance Metrics",
        "icon": "$(dashboard)"
      },
      {
        "command": "xfidelity.debugDiagnostics",
        "title": "X-Fidelity: Debug Diagnostics Info",
        "icon": "$(bug)"
      },
      {
        "command": "xfidelity.debugCLISetup",
        "title": "X-Fidelity: Debug CLI Setup",
        "icon": "$(tools)"
      },
      {
        "command": "xfidelity.diagnoseCLIResult",
        "title": "X-Fidelity: Diagnose CLI Result File Issue",
        "icon": "$(search)"
      },
      {
        "command": "xfidelity.explainIssue",
        "title": "Explain Issue",
        "icon": "$(question)"
      },
      {
        "command": "xfidelity.fixIssue",
        "title": "‚ú® Fix Issue",
        "icon": "$(wrench)"
      },
      {
        "command": "xfidelity.fixAllIssues",
        "title": "‚ú® Fix All",
        "icon": "$(wrench)"
      },
      {
        "command": "xfidelity.fixIssueGroup",
        "title": "‚ú® Fix Issue Group",
        "icon": "$(wrench)"
      },
      {
        "command": "xfidelity.configureCommandProviders",
        "title": "X-Fidelity: Configure Command Providers",
        "icon": "$(gear)"
      }
    ],
    "extensionPoints": [
      {
        "name": "xfidelity.issueExplainer",
        "description": "Provides issue explanation capabilities for X-Fidelity",
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for this explainer"
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable name for this explainer"
            },
            "command": {
              "type": "string",
              "description": "Command to execute for explanation"
            },
            "supportedLanguages": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Supported programming languages"
            }
          },
          "required": [
            "id",
            "displayName",
            "command"
          ]
        }
      },
      {
        "name": "xfidelity.issueFixer",
        "description": "Provides automated issue fixing capabilities for X-Fidelity",
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for this fixer"
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable name for this fixer"
            },
            "command": {
              "type": "string",
              "description": "Command to execute for fixing"
            },
            "supportsBatch": {
              "type": "boolean",
              "description": "Whether this fixer supports batch operations"
            },
            "supportedRuleTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Types of rules this fixer can handle"
            }
          },
          "required": [
            "id",
            "displayName",
            "command"
          ]
        }
      }
    ],
    "configuration": {
      "title": "X-Fidelity",
      "properties": {
        "xfidelity.configServer": {
          "type": "string",
          "default": "",
          "description": "üåê Remote config server URL. Resolution order: 1) configServer (highest priority), 2) githubConfigLocation, 3) localConfigPath, 4) ~/.config/x-fidelity, 5) XFI_CONFIG_PATH env var, 6) built-in defaults",
          "order": 1
        },
        "xfidelity.githubConfigLocation": {
          "type": "string",
          "default": "",
          "description": "üìÇ GitHub repository URL for configuration files (e.g., 'https://github.com/org/repo/tree/main/config')",
          "examples": [
            "https://github.com/org/repo/tree/main/config",
            "git@github.com:org/repo/tree/main/config",
            "https://github.com/zotoio/x-fidelity/tree/master/packages/x-fidelity-democonfig/src"
          ],
          "order": 2
        },
        "xfidelity.githubConfigUpdateFrequency": {
          "type": "number",
          "default": 240,
          "minimum": 5,
          "maximum": 1440,
          "description": "‚è±Ô∏è How often to update GitHub configuration in minutes (default: 4 hours). Only applies when githubConfigLocation is set.",
          "order": 3
        },
        "xfidelity.localConfigPath": {
          "type": "string",
          "default": "",
          "description": "üìÅ Path to local configuration directory (relative to workspace root). Used when configServer and githubConfigLocation are not set.",
          "order": 4
        },
        "xfidelity.nodeGlobalBinPath": {
          "type": "string",
          "default": "",
          "description": "üîß Override path to directory containing Node.js binaries. Generally not required - leave empty for automatic discovery. Use only as failsafe for custom Node.js installations.",
          "examples": [
            "/usr/local/bin",
            "/opt/homebrew/bin",
            "~/.nvm/versions/node/v20.0.0/bin",
            "C:\\Program Files\\nodejs"
          ],
          "order": 5
        },
        "xfidelity.archetype": {
          "type": "string",
          "default": "node-fullstack",
          "enum": [
            "node-fullstack",
            "react-spa",
            "java-microservice",
            "python-service",
            "dotnet-service"
          ],
          "description": "üèóÔ∏è Project archetype - determines which rules and analysis patterns to use",
          "order": 10
        },
        "xfidelity.analyzeOnStartup": {
          "type": "boolean",
          "default": true,
          "description": "üöÄ Run analysis automatically when the extension starts",
          "order": 11
        },
        "xfidelity.runInterval": {
          "type": "number",
          "default": 0,
          "minimum": 0,
          "description": "‚è±Ô∏è Automatically run analysis every N seconds (0 = disabled). Recommended for CI/monitoring workflows. Note: May impact performance.",
          "order": 12
        },
        "xfidelity.autoAnalyzeOnSave": {
          "type": "boolean",
          "default": false,
          "description": "üíæ Run analysis automatically when files are saved. Note: May impact performance on large projects with frequent saves.",
          "order": 13
        },
        "xfidelity.showInlineDecorations": {
          "type": "boolean",
          "default": true,
          "description": "üîç Show squiggly underlines for code issues in the editor",
          "order": 20
        },
        "xfidelity.highlightSeverity": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "error",
              "warning",
              "info",
              "hint"
            ]
          },
          "default": [
            "error",
            "warning"
          ],
          "description": "‚ö†Ô∏è Which issue severities to highlight in the editor",
          "order": 21
        },
        "xfidelity.statusBarVisibility": {
          "type": "boolean",
          "default": true,
          "description": "üìä Show X-Fidelity status information in the status bar",
          "order": 22
        },
        "xfidelity.problemsPanelGrouping": {
          "type": "string",
          "enum": [
            "file",
            "severity",
            "rule",
            "category"
          ],
          "default": "file",
          "description": "üìã How to organize issues in the Problems panel",
          "order": 23
        },
        "xfidelity.showRuleDocumentation": {
          "type": "boolean",
          "default": true,
          "description": "üìö Show rule documentation in hover tooltips and quick fixes",
          "order": 24
        },
        "xfidelity.excludePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "node_modules/**",
            ".git/**",
            "dist/**",
            "build/**",
            ".xfiResults/**"
          ],
          "description": "üö´ File patterns to exclude from analysis (glob patterns). Each archetype configuration contains sensible defaults that are merged with these patterns.",
          "order": 30
        },
        "xfidelity.includePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**/*.ts",
            "**/*.tsx",
            "**/*.js",
            "**/*.jsx",
            "**/*.json"
          ],
          "description": "‚úÖ File patterns to include in analysis (glob patterns). Each archetype configuration contains appropriate defaults for the project type. Leave empty to include all files except excluded patterns.",
          "order": 31
        },
        "xfidelity.maxFileSize": {
          "type": "number",
          "default": 524288,
          "description": "üìè Maximum file size to analyze (bytes, default: 512KB)",
          "order": 32
        },
        "xfidelity.generateReports": {
          "type": "boolean",
          "default": false,
          "description": "üìÑ Generate detailed analysis reports after each run",
          "order": 40
        },
        "xfidelity.reportFormats": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "json",
              "md",
              "html",
              "csv"
            ]
          },
          "default": [
            "json",
            "md"
          ],
          "description": "üìã Report formats to generate (JSON, Markdown, HTML, CSV)",
          "order": 41
        },
        "xfidelity.reportOutputDir": {
          "type": "string",
          "default": "",
          "description": "üìÇ Directory for saving reports (default: workspace root/.xfiResults)",
          "order": 42
        },
        "xfidelity.showReportAfterAnalysis": {
          "type": "boolean",
          "default": false,
          "description": "üëÅÔ∏è Automatically open reports after generation",
          "order": 43
        },
        "xfidelity.reportRetentionDays": {
          "type": "number",
          "default": 30,
          "description": "üóÇÔ∏è Number of days to keep old reports (0 = keep forever)",
          "order": 44
        },
        "xfidelity.openaiEnabled": {
          "type": "boolean",
          "default": false,
          "description": "ü§ñ Enable OpenAI-powered analysis for advanced code insights (requires API key)",
          "order": 50
        },
        "xfidelity.telemetryCollector": {
          "type": "string",
          "default": "",
          "description": "üåê Custom telemetry endpoint URL (leave empty for default)",
          "order": 52
        },
        "xfidelity.enableTreeSitterWasm": {
          "type": "boolean",
          "default": true,
          "description": "‚ö° Use WebAssembly parser (recommended for better VSCode compatibility)",
          "order": 60
        },
        "xfidelity.cacheResults": {
          "type": "boolean",
          "default": true,
          "description": "üí® Cache analysis results for faster subsequent runs",
          "order": 61
        },
        "xfidelity.cacheTTL": {
          "type": "number",
          "default": 30,
          "description": "‚è∞ Cache expiration time in minutes",
          "order": 62
        },
        "xfidelity.analysisTimeout": {
          "type": "number",
          "default": 60000,
          "description": "‚è±Ô∏è Analysis timeout in milliseconds (default: 60 seconds)",
          "order": 63
        },
        "xfidelity.debugMode": {
          "type": "boolean",
          "default": false,
          "description": "üêõ Enable detailed debug logging for troubleshooting",
          "order": 70
        },
        "xfidelity.cliExtraArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "üõ†Ô∏è Additional command-line arguments to pass to the analysis engine. Examples: ['--verbose', '--no-color', '--format=json']",
          "examples": [
            [
              "--verbose"
            ],
            [
              "--no-color",
              "--format=json"
            ],
            [
              "--debug",
              "--show-timing"
            ]
          ],
          "order": 71
        },
        "xfidelity.customPlugins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "üîå Paths to custom X-Fidelity plugin directories or files. Paths are relative to workspace root.",
          "examples": [
            [
              "./custom-plugins",
              "./my-plugin.js"
            ],
            [
              "../shared-plugins/security-plugin"
            ]
          ],
          "order": 72
        },
        "xfidelity.ruleOverrides": {
          "type": "object",
          "default": {},
          "description": "‚öôÔ∏è Custom rule configuration overrides (advanced). Format: {'rule-id': {'enabled': true, 'severity': 'error', 'parameters': {...}}}",
          "examples": [
            {
              "no-unused-vars": {
                "enabled": false
              },
              "max-line-length": {
                "severity": "warning",
                "parameters": {
                  "maxLength": 120
                }
              }
            }
          ],
          "order": 73
        },
        "xfidelity.commandProviders": {
          "type": "object",
          "description": "üîó Configure which VSCode commands provide X-Fidelity functionality. Format: 'command.name' not 'extension.id'. Requires 'enableCommandDelegation' to be enabled.",
          "properties": {
            "explainIssue": {
              "type": "string",
              "default": "built-in",
              "description": "Command for explaining issues",
              "examples": [
                "github.copilot.interactiveEditor.explain",
                "codeium.explainCodeBlock",
                "built-in"
              ]
            },
            "fixIssue": {
              "type": "string",
              "default": "built-in",
              "description": "Command for fixing single issues",
              "examples": [
                "github.copilot.interactiveEditor.generateDocs",
                "codeium.refactorCodeBlock",
                "built-in"
              ]
            },
            "fixIssueGroup": {
              "type": "string",
              "default": "built-in",
              "description": "Command for batch fixing multiple issues",
              "examples": [
                "github.copilot.interactiveEditor.generateDocs",
                "workbench.action.terminal.sendSequence",
                "built-in"
              ]
            }
          },
          "default": {
            "explainIssue": "built-in",
            "fixIssue": "built-in",
            "fixIssueGroup": "built-in"
          },
          "additionalProperties": false,
          "order": 74
        },
        "xfidelity.enableCommandDelegation": {
          "type": "boolean",
          "default": true,
          "description": "üîÄ Allow commands to be handled by other VSCode extensions",
          "order": 75
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "xfidelity",
          "title": "X-Fidelity",
          "icon": "$(zap)"
        }
      ]
    },
    "views": {
      "xfidelity": [
        {
          "icon": "$(warning)",
          "id": "xfidelityIssuesTreeView",
          "name": "Issues",
          "when": "true",
          "visibility": "visible"
        },
        {
          "icon": "$(dashboard)",
          "id": "xfidelityControlCenterView",
          "name": "Control Center",
          "when": "true",
          "visibility": "visible"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "xfidelity.refreshIssuesTree",
          "when": "view == xfidelityIssuesTreeView",
          "group": "navigation@1"
        },
        {
          "command": "xfidelity.cancelAnalysis",
          "when": "view == xfidelityIssuesTreeView && xfidelity.analysisRunning",
          "group": "navigation@2"
        },
        {
          "command": "xfidelity.showControlCenter",
          "when": "view == xfidelityIssuesTreeView",
          "group": "navigation@3"
        },
        {
          "command": "xfidelity.issuesTreeGroupBySeverity",
          "when": "view == xfidelityIssuesTreeView",
          "group": "1_grouping@1"
        },
        {
          "command": "xfidelity.issuesTreeGroupByRule",
          "when": "view == xfidelityIssuesTreeView",
          "group": "1_grouping@2"
        },
        {
          "command": "xfidelity.issuesTreeGroupByFile",
          "when": "view == xfidelityIssuesTreeView",
          "group": "1_grouping@3"
        },
        {
          "command": "xfidelity.issuesTreeGroupByCategory",
          "when": "view == xfidelityIssuesTreeView",
          "group": "1_grouping@4"
        }
      ],
      "commandPalette": [
        {
          "command": "xfidelity.cancelAnalysis",
          "when": "xfidelity.analysisRunning"
        }
      ],
      "view/item/context": [
        {
          "command": "xfidelity.goToIssue",
          "when": "view == xfidelityIssuesTreeView && viewItem == issue",
          "group": "navigation@1"
        },
        {
          "command": "xfidelity.showIssueRuleInfo",
          "when": "view == xfidelityIssuesTreeView && viewItem == issue",
          "group": "1_actions@1"
        },
        {
          "command": "xfidelity.explainIssue",
          "when": "view == xfidelityIssuesTreeView && viewItem == issue",
          "group": "1_actions@2"
        },
        {
          "command": "xfidelity.fixIssue",
          "when": "view == xfidelityIssuesTreeView && viewItem == issue",
          "group": "1_actions@3"
        },
        {
          "command": "xfidelity.fixAllIssues",
          "when": "view == xfidelityIssuesTreeView && viewItem == issueGroup",
          "group": "1_actions@1"
        }
      ]
    }
  },
  "dependencies": {
    "@x-fidelity/core": "file:../x-fidelity-core",
    "@x-fidelity/democonfig": "file:../x-fidelity-democonfig",
    "@x-fidelity/plugins": "file:../x-fidelity-plugins",
    "@x-fidelity/types": "file:../x-fidelity-types",
    "fs-extra": "^11.3.0",
    "tree-sitter": "^0.22.4",
    "tree-sitter-javascript": "^0.23.1",
    "tree-sitter-typescript": "^0.23.2",
    "vscode-languageclient": "^9.0.1",
    "web-tree-sitter": "^0.25.0",
    "yaml": "^2.6.0"
  },
  "devDependencies": {
    "@electron/rebuild": "^3.6.2",
    "@types/glob": "^8.1.0",
    "@types/jest": "^30.0.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "^22.x",
    "@types/vscode": "^1.99.0",
    "@typescript-eslint/eslint-plugin": "^8.35.0",
    "@typescript-eslint/parser": "^8.35.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.0",
    "copy-webpack-plugin": "^12.0.2",
    "esbuild": "^0.25.5",
    "eslint": "^9.29.0",
    "eslint-config-prettier": "^10.1.5",
    "glob": "11.0.3",
    "jest": "^30.0.0",
    "mocha": "^11.7.0",
    "npm-run-all": "^4.1.5",
    "ovsx": "^0.10.5",
    "prettier": "^3.6.1",
    "rimraf": "^6.0.1",
    "semantic-release": "^24.2.7",
    "ts-jest": "^29.2.6",
    "typescript": "^5.8.3"
  },
  "scripts": {
    "vscode:prepublish": "yarn build:production",
    "build": "yarn clean && yarn build:dependencies && yarn lint:fix && yarn build:cli && yarn embed:cli && yarn check-types && node esbuild.config.js",
    "build:production": "yarn clean && yarn build:dependencies && yarn lint:fix && yarn build:cli && yarn embed:cli && yarn check-types && node esbuild.config.js --production",
    "build:dependencies": "cd ../../ && turbo build --filter=@x-fidelity/types --filter=@x-fidelity/core --filter=@x-fidelity/plugins --filter=@x-fidelity/democonfig",
    "build:cli": "cd ../../ && turbo build --filter=x-fidelity && echo 'üì¶ CLI built for embedding'",
    "build:cli:check": "node -e \"const path = require('path'); const cliPkg = require(path.resolve(__dirname, '../x-fidelity-cli/package.json')); console.log('üîç CLI package version for embedding:', cliPkg.version);\"",
    "verify:dependencies": "node -e \"const fs = require('fs'); const deps = ['../x-fidelity-types/dist/index.js', '../x-fidelity-core/dist/index.js', '../x-fidelity-plugins/dist/index.js']; const srcDeps = ['../x-fidelity-types/src/index.ts', '../x-fidelity-core/src/index.ts', '../x-fidelity-plugins/src/index.ts']; [...deps, ...srcDeps].forEach(dep => { if (!fs.existsSync(dep)) { console.error('Missing dependency:', dep); process.exit(1); } }); console.log('All dependencies verified');\"",
    "ensure-symlinks": "node scripts/ensure-workspace-symlinks.js",
    "embed:cli": "node scripts/embed-cli.js",
    "dev": "node --no-warnings=ExperimentalWarning esbuild.config.js --dev",
    "watch": "node --no-warnings=ExperimentalWarning esbuild.config.js --watch",
    "package": "yarn sync-version && vsce package --yarn",
    "sync-version": "node scripts/sync-version.js",
    "sync-published-version": "node scripts/sync-published-version.js",
    "validate-release-workflow": "node scripts/validate-release-workflow.js",
    "test-version-sync-behavior": "node scripts/test-version-sync-behavior.js",
    "reset-version-placeholder": "node -e \"const pkg = require('./package.json'); pkg.version = '0.0.0-semantically-released'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\\n'); console.log('‚úÖ Reset to placeholder version');\"",
    "rebuild-native": "yarn rebuild --runtime=electron --target=35.5.1 --cache=.npm --disturl=https://electronjs.org/headers",
    "rebuild-native:check": "node -e \"try { require('tree-sitter'); console.log('‚úÖ Native modules OK'); } catch(e) { console.log('‚ùå Native rebuild needed:', e.message); process.exit(1); }\"",
    "pretest": "yarn build:dependencies && yarn verify:dependencies && yarn check-types && yarn build:test && yarn rebuild-native:check || yarn rebuild-native && yarn lint:fix && yarn clean:test-artifacts && node -e \"require('fs').mkdirSync('./vscode-test-user-data', {recursive: true})\" && yarn build:cli",
    "test": "yarn check-types && yarn lint && yarn test:unit",
    "test:coverage": "yarn check-types && yarn lint && jest --coverage",
    "test:unit": "yarn check-types && yarn lint && jest",
    "test:integration": "yarn build && yarn build:test && yarn verify:dependencies && node scripts/test-cross-platform.js integration",
    "test:integration:binary": "yarn build && yarn build:test && yarn verify:dependencies && node scripts/test-cross-platform.js integration --grep \"Binary Discovery\"",
    "test:integration:vscode-setting": "yarn build && yarn build:test && yarn verify:dependencies && node scripts/test-cross-platform.js integration --grep \"VSCode Setting Override\"",
    "test:integration:crossplatform": "yarn build && yarn build:test && yarn verify:dependencies && node scripts/test-cross-platform.js integration --grep \"Cross-Platform\"",
    "test:core": "yarn build && yarn build:test && node scripts/test-cross-platform.js core",
    "test:core:binary": "cd ../x-fidelity-core && yarn test binaryDiscovery.integration.test.ts",
    "test:fast": "yarn test:unit && yarn test:core",
    "test:full": "yarn test:unit && yarn test:integration",
    "test:ci": "yarn build && yarn build:test && yarn verify:dependencies && node scripts/test-cross-platform.js integration --ci",
    "test:headless": "yarn build && yarn build:test && node scripts/test-cross-platform.js integration --ci",
    "test:debug": "yarn build && yarn build:test && node scripts/test-cross-platform.js integration --debug",
    "lint": "eslint src --ext ts && prettier --check src/**/*.ts",
    "lint:fix": "eslint src --ext ts --fix && yarn format",
    "format": "prettier --write src/**/*.ts",
    "format:check": "prettier --check src/**/*.ts",
    "prebuild:production": "yarn format",
    "check-types": "yarn build:dependencies && tsc --noEmit",
    "build:test": "yarn build:dependencies && tsc -p tsconfig.test.json && node scripts/fix-test-imports.js && yarn ensure-symlinks",
    "clean": "rimraf out dist dist-test config .vscode-test .vscode-test-profile && node -e \"try { require('fs').readdirSync('.').filter(f => f.endsWith('.tsbuildinfo')).forEach(f => require('fs').unlinkSync(f)); } catch(e) { /* ignore */ }\"",
    "clean:test-artifacts": "rm -rf .vscode-test/user-data/Crashpad/pending/*.lock .vscode-test/user-data/logs/* ./.vscode-test-user-data || true",
    "publish": "yarn package && vsce publish",
    "install-vsix": "code --install-extension $(ls *.vsix | head -1) --force",
    "test:vsix": "node scripts/test-vsix-installation.js",
    "dev:build": "yarn clean && (yarn rebuild-native:check || yarn rebuild-native) && tsc && node --no-warnings=ExperimentalWarning esbuild.config.js",
    "dev:fresh": "yarn dev:build && code --extensionDevelopmentPath=. --new-window --user-data-dir=./.vscode-test-profile .",
    "dev:watch": "yarn dev:build && (yarn watch &) && sleep 2 && code --extensionDevelopmentPath=. --new-window .",
    "dev:complete": "./scripts/dev-complete.sh",
    "test:all": "yarn test:unit && yarn test:integration && yarn test:e2e",
    "test:watch": "node -e \"require('fs').mkdirSync('./.vscode-test-user-data', {recursive: true})\" && xvfb-run -a --server-args='-screen 0 1920x1080x24 -ac +extension GLX +render -noreset -nolisten tcp' vscode-test --config .vscode-test.mjs --label unit --watch",
    "debug": "yarn dev:build && code --extensionDevelopmentPath=. --new-window --enable-proposed-api",
    "verify": "node scripts/verify-extension.js",
    "verify:ci": "yarn build && node scripts/verify-extension.js",
    "verify:full": "yarn build && node scripts/verify-extension.js",
    "validate-vsix": "node scripts/validate-vsix-dependencies.js",
    "test-tree-sitter": "node scripts/test-tree-sitter-bundling.js",
    "validate-packaging": "yarn build && yarn package && yarn validate-vsix",
    "test-bundling": "yarn build && yarn test-tree-sitter",
    "publish:universal": "node scripts/publish-universal.js",
    "release": "echo '‚ö†Ô∏è  Individual package releases are disabled. Use root-level semantic-release for unified releases.'"
  }
}
