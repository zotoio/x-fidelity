"use strict";(self.webpackChunkx_fidelity_website=self.webpackChunkx_fidelity_website||[]).push([[3997],{3682:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"library-migration-tracking","title":"Library Migration Tracking","description":"x-fidelity provides powerful tools to track and manage API migrations and library upgrades across your codebase.","source":"@site/docs/library-migration-tracking.md","sourceDirName":".","slug":"/library-migration-tracking","permalink":"/x-fidelity/docs/library-migration-tracking","draft":false,"unlisted":false,"editUrl":"https://github.com/zotoio/x-fidelity/edit/main/website/docs/library-migration-tracking.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"docs","previous":{"title":"OpenAI Integration","permalink":"/x-fidelity/docs/openai-integration"},"next":{"title":"Notifications","permalink":"/x-fidelity/docs/notifications"}}');var t=i(4848),r=i(8453);const a={sidebar_position:12},o="Library Migration Tracking",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Global Pattern Analysis",id:"global-pattern-analysis",level:2},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"React Hooks Migration",id:"react-hooks-migration",level:3},{value:"TypeScript Adoption",id:"typescript-adoption",level:3},{value:"Logging Framework Migration",id:"logging-framework-migration",level:3},{value:"Developer Experience",id:"developer-experience",level:2},{value:"Gradual Adoption Strategy",id:"gradual-adoption-strategy",level:3},{value:"Detailed Reporting",id:"detailed-reporting",level:3},{value:"Setting Up Migration Dashboards",id:"setting-up-migration-dashboards",level:3},{value:"Automated Migration Tools",id:"automated-migration-tools",level:3},{value:"Integration with CI/CD",id:"integration-with-cicd",level:2},{value:"GitHub Actions Example",id:"github-actions-example",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"library-migration-tracking",children:"Library Migration Tracking"})}),"\n",(0,t.jsx)(n.p,{children:"x-fidelity provides powerful tools to track and manage API migrations and library upgrades across your codebase."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"When upgrading libraries or migrating from legacy APIs to new ones, it's crucial to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Track adoption progress"}),"\n",(0,t.jsx)(n.li,{children:"Ensure consistent usage across teams"}),"\n",(0,t.jsx)(n.li,{children:"Identify areas needing focused migration efforts"}),"\n",(0,t.jsx)(n.li,{children:"Know when you can safely remove deprecated APIs"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"x-fidelity's global pattern analysis features make this process transparent and measurable."}),"\n",(0,t.jsx)(n.h2,{id:"global-pattern-analysis",children:"Global Pattern Analysis"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"globalFileAnalysis"})," fact and related operators allow you to:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Define patterns representing new and legacy API usage"}),"\n",(0,t.jsx)(n.li,{children:"Analyze their occurrence across your entire codebase"}),"\n",(0,t.jsx)(n.li,{children:"Calculate adoption ratios and statistics"}),"\n",(0,t.jsx)(n.li,{children:"Set thresholds for acceptable migration progress"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "name": "apiMigrationProgress-global",\n    "conditions": {\n        "all": [\n            {\n                "fact": "fileData",\n                "path": "$.fileName",\n                "operator": "equal",\n                "value": "REPO_GLOBAL_CHECK"\n            },\n            {\n                "fact": "globalFileAnalysis",\n                "params": {\n                    "newPatterns": [\n                        "newApiMethod\\\\(",\n                        "modernApiCall\\\\("\n                    ],\n                    "legacyPatterns": [\n                        "legacyApiMethod\\\\(",\n                        "deprecatedApiCall\\\\("\n                    ],\n                    "fileFilter": "\\\\.(ts|js)$",\n                    "resultFact": "apiMigrationAnalysis"\n                },\n                "operator": "globalPatternRatio",\n                "value": 0.8\n            }\n        ]\n    },\n    "event": {\n        "type": "warning",\n        "params": {\n            "message": "The codebase is not consistently using the new API methods. At least 80% of API calls should use the new methods.",\n            "details": {\n                "fact": "apiMigrationAnalysis"\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This rule checks if at least 80% of API calls use the new methods instead of legacy ones."}),"\n",(0,t.jsx)(n.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,t.jsx)(n.h3,{id:"react-hooks-migration",children:"React Hooks Migration"}),"\n",(0,t.jsx)(n.p,{children:"Track migration from class components to functional components with hooks:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "fact": "globalFileAnalysis",\n    "params": {\n        "newPatterns": [\n            "useState\\\\(",\n            "useEffect\\\\(",\n            "const\\\\s+\\\\w+\\\\s*=\\\\s*\\\\(\\\\)\\\\s*=>\\\\s*{"\n        ],\n        "legacyPatterns": [\n            "extends\\\\s+React\\\\.Component",\n            "componentDidMount\\\\(",\n            "this\\\\.setState\\\\("\n        ],\n        "fileFilter": "\\\\.(jsx|tsx)$",\n        "resultFact": "reactHooksMigration"\n    },\n    "operator": "globalPatternRatio",\n    "value": 0.7\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"typescript-adoption",children:"TypeScript Adoption"}),"\n",(0,t.jsx)(n.p,{children:"Track migration from JavaScript to TypeScript:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "fact": "globalFileAnalysis",\n    "params": {\n        "newPatterns": [\n            "\\\\.ts$",\n            "\\\\.tsx$"\n        ],\n        "legacyPatterns": [\n            "\\\\.js$",\n            "\\\\.jsx$"\n        ],\n        "fileFilter": "\\\\.(js|jsx|ts|tsx)$",\n        "resultFact": "typescriptAdoption"\n    },\n    "operator": "globalPatternRatio",\n    "value": 0.5\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"logging-framework-migration",children:"Logging Framework Migration"}),"\n",(0,t.jsx)(n.p,{children:"Track migration from console.log to a structured logging framework:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "fact": "globalFileAnalysis",\n    "params": {\n        "newPatterns": [\n            "logger\\\\.info\\\\(",\n            "logger\\\\.error\\\\(",\n            "logger\\\\.debug\\\\("\n        ],\n        "legacyPatterns": [\n            "console\\\\.log\\\\(",\n            "console\\\\.error\\\\(",\n            "console\\\\.warn\\\\("\n        ],\n        "fileFilter": "\\\\.(js|ts)$",\n        "resultFact": "loggingFrameworkAdoption"\n    },\n    "operator": "globalPatternRatio",\n    "value": 0.9\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"developer-experience",children:"Developer Experience"}),"\n",(0,t.jsx)(n.h3,{id:"gradual-adoption-strategy",children:"Gradual Adoption Strategy"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Start with low thresholds"}),": Begin with a low ratio threshold (e.g., 0.2 or 20%)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Increase over time"}),": Gradually increase the threshold as teams adopt the new patterns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use warnings first"}),": Start with warning-level events before making them fatal"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Provide exemptions"}),": Use the exemption system for legitimate exceptions"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"detailed-reporting",children:"Detailed Reporting"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"globalFileAnalysis"})," fact provides detailed information about:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Which files contain legacy patterns"}),"\n",(0,t.jsx)(n.li,{children:"Line numbers and context for each match"}),"\n",(0,t.jsx)(n.li,{children:"Total counts for each pattern"}),"\n",(0,t.jsx)(n.li,{children:"Overall statistics"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This helps developers identify exactly where changes are needed."}),"\n",(0,t.jsx)(n.h3,{id:"setting-up-migration-dashboards",children:"Setting Up Migration Dashboards"}),"\n",(0,t.jsx)(n.p,{children:"Create dashboards to visualize migration progress:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Configure telemetry collection"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"xfidelity . -t https://telemetry.example.com\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Add custom metadata to track progress over time"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"event": {\n    "type": "warning",\n    "params": {\n        "message": "Migration in progress",\n        "metadata": {\n            "migrationId": "react-hooks-migration",\n            "currentRatio": {\n                "fact": "apiMigrationAnalysis.summary.newPatternsTotal"\n            },\n            "totalPatterns": {\n                "fact": "apiMigrationAnalysis.summary.totalMatches"\n            }\n        }\n    }\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Visualize progress"})," using tools like Grafana or custom dashboards"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"automated-migration-tools",children:"Automated Migration Tools"}),"\n",(0,t.jsx)(n.p,{children:"Combine x-fidelity with code modification tools:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Identify targets"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Export list of files needing migration\nxfidelity . --export-results migration-targets.json\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Generate migration scripts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create migration script based on results\nnode generate-migration.js --input migration-targets.json\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Apply changes and verify"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Apply changes\nnode apply-migration.js\n\n# Verify changes\nxfidelity . --verify-migration\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-cicd",children:"Integration with CI/CD"}),"\n",(0,t.jsx)(n.p,{children:"Add these checks to your CI/CD pipeline to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Track migration progress over time"}),"\n",(0,t.jsx)(n.li,{children:"Prevent regression to legacy patterns"}),"\n",(0,t.jsx)(n.li,{children:"Ensure consistent adoption across teams"}),"\n",(0,t.jsx)(n.li,{children:"Provide visibility to management"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"github-actions-example",children:"GitHub Actions Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"name: Library Migration Check\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  migration-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - name: Install x-fidelity\n        run: yarn global add x-fidelity\n      - name: Check migration progress\n        run: |\n          xfidelity . -a migration-tracking\n          # Extract progress metrics for PR comment\n          node .github/scripts/extract-migration-metrics.js\n      - name: Comment PR\n        if: github.event_name == 'pull_request'\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const fs = require('fs');\n            const metrics = JSON.parse(fs.readFileSync('migration-metrics.json', 'utf8'));\n            const progressBar = createProgressBar(metrics.ratio);\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: `## Migration Progress\\n${progressBar}\\n**Current ratio:** ${metrics.ratio * 100}%\\n**Target:** 80%`\n            });\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Choose patterns carefully"}),": Ensure patterns are specific enough to avoid false positives"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document the migration plan"}),": Share the timeline and expected thresholds with all teams"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Provide migration guides"}),": Create documentation on how to update from legacy to new patterns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor progress"}),": Regularly review the analysis results to track adoption"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Celebrate milestones"}),": Acknowledge teams when they reach migration targets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automate where possible"}),": Create tools to assist with repetitive migration tasks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set realistic timelines"}),": Base deadlines on codebase size and complexity"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Learn about ",(0,t.jsx)(n.a,{href:"exemptions",children:"Exemptions"})," for handling special cases"]}),"\n",(0,t.jsxs)(n.li,{children:["Explore ",(0,t.jsx)(n.a,{href:"ci-cd/overview",children:"CI/CD Integration"})," for automated checks"]}),"\n",(0,t.jsxs)(n.li,{children:["Set up ",(0,t.jsx)(n.a,{href:"telemetry",children:"Telemetry"})," to track progress over time"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);