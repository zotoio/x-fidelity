"use strict";(self.webpackChunkx_fidelity_website=self.webpackChunkx_fidelity_website||[]).push([[3444],{4541:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"plugins/xfi-plugin-extract-values","title":"Extract Values Plugin (xfiPluginExtractValues)","description":"Overview","source":"@site/docs/plugins/xfi-plugin-extract-values.md","sourceDirName":"plugins","slug":"/plugins/xfi-plugin-extract-values","permalink":"/x-fidelity/docs/plugins/xfi-plugin-extract-values","draft":false,"unlisted":false,"editUrl":"https://github.com/zotoio/x-fidelity/edit/main/website/docs/plugins/xfi-plugin-extract-values.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12,"title":"Extract Values Plugin (xfiPluginExtractValues)"}}');var a=t(4848),r=t(8453);const i={sidebar_position:12,title:"Extract Values Plugin (xfiPluginExtractValues)"},l=void 0,c={},o=[{value:"Overview",id:"overview",level:3},{value:"Strategies",id:"strategies",level:3},{value:"Security",id:"security",level:3},{value:"Fact: extractValues",id:"fact-extractvalues",level:3},{value:"Operator: matchesSatisfy",id:"operator-matchessatisfy",level:3},{value:"Example Rules",id:"example-rules",level:3},{value:"Tips",id:"tips",level:3}];function d(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["The Extract Values plugin (",(0,a.jsx)(n.code,{children:"xfiPluginExtractValues"}),") provides a flexible way to extract values from files and expose them as runtime facts for other rules to validate. It supports multiple strategies per file extension and a robust fallback to regex. Extraction never throws; failures are captured in the result so rules/events can reference them."]}),"\n",(0,a.jsx)(n.h3,{id:"strategies",children:"Strategies"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["jsonpath for ",(0,a.jsx)(n.code,{children:".json"})]}),"\n",(0,a.jsxs)(n.li,{children:["yaml-jsonpath for ",(0,a.jsx)(n.code,{children:".yaml"}),"/",(0,a.jsx)(n.code,{children:".yml"})," (parse YAML to JSON, then JSONPath)"]}),"\n",(0,a.jsxs)(n.li,{children:["xpath for ",(0,a.jsx)(n.code,{children:".xml"})]}),"\n",(0,a.jsxs)(n.li,{children:["ast-jsonpath / ast-query (reusing the ",(0,a.jsx)(n.code,{children:"ast"})," fact from ",(0,a.jsx)(n.code,{children:"xfiPluginAst"})," when present)"]}),"\n",(0,a.jsx)(n.li,{children:"regex fallback for any filetype"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["No arbitrary filesystem access; only works on ",(0,a.jsx)(n.code,{children:"fileData"})," provided by the engine."]}),"\n",(0,a.jsx)(n.li,{children:"XML DOCTYPE is blocked (prevents XXE)."}),"\n",(0,a.jsx)(n.li,{children:"Caps for content size, match count, and regex length."}),"\n",(0,a.jsx)(n.li,{children:"Logging avoids sensitive content (summaries only)."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"fact-extractvalues",children:"Fact: extractValues"}),"\n",(0,a.jsx)(n.p,{children:"Invoked per file to perform extraction and optionally store the result as a runtime fact for later use in rule events."}),"\n",(0,a.jsx)(n.p,{children:"Params schema (simplified):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "resultFact": "myExtractedValues",\n  "strategies": {\n    ".json": { "type": "jsonpath", "paths": ["$.version"] },\n    ".yml":  { "type": "yaml-jsonpath", "paths": ["$.services[*].image"] },\n    ".xml":  { "type": "xpath", "expressions": ["//service/@id"] },\n    ".ts":   { "type": "ast-jsonpath", "paths": ["$.tree.rootNode.childCount"] }\n  },\n  "defaultStrategy": { "type": "regex", "pattern": "API_KEY=(.*)", "flags": "i" },\n  "include": [".*"],\n  "exclude": [".*/dist/.*"],\n  "limits": { "maxContentBytes": 1048576, "maxMatches": 100, "maxPatternLength": 1024 },\n  "dedupe": true,\n  "captureContext": true\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Result fact shape:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"type ExtractValuesResult = {\n  strategyUsed: 'jsonpath' | 'yaml-jsonpath' | 'xpath' | 'regex' | 'ast-jsonpath' | 'ast-query';\n  matches: Array<{ value: any; location?: { filePath: string; line?: number; column?: number }; meta?: any }>;\n  errors: Array<{ code: string; message: string; details?: any }>;\n  stats: { totalMatches: number; truncated?: boolean; durationMs: number };\n  file: { path: string; ext: string; size?: number };\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"operator-matchessatisfy",children:"Operator: matchesSatisfy"}),"\n",(0,a.jsxs)(n.p,{children:["Use this operator to evaluate the ",(0,a.jsx)(n.code,{children:"extractValues"})," results with param-driven conditions (contains, counts, every/some, strategy checks, composition via all/any/none)."]}),"\n",(0,a.jsx)(n.p,{children:"Common params:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "requireMatches": true,\n  "requireNoErrors": true,\n  "count": { "op": ">=", "value": 1 },\n  "contains": { "value": "x", "mode": "any" },\n  "countWhere": { "path": "name", "equals": "y", "op": ">", "value": 1 },\n  "every": { "path": "id", "predicate": "isNumber" },\n  "strategyIs": "regex"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Composability:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "all": [\n    { "requireNoErrors": true },\n    { "count": { "op": ">=", "value": 3 } },\n    { "contains": { "regex": "^svc-", "flags": "i", "mode": "any" } }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-rules",children:"Example Rules"}),"\n",(0,a.jsx)(n.p,{children:"JSON (extract version):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "json-extract-version-iterative",\n  "conditions": {\n    "all": [\n      {\n        "fact": "extractValues",\n        "params": {\n          "resultFact": "pkgVersion",\n          "strategies": { ".json": { "type": "jsonpath", "paths": ["$.version"] } }\n        },\n        "operator": "matchesSatisfy",\n        "value": { "requireMatches": true, "count": { "op": "==", "value": 1 }, "every": { "predicate": "isString" } }\n      }\n    ]\n  },\n  "event": {\n    "type": "info",\n    "params": { "message": "Extracted package version", "details": { "fact": "pkgVersion" } }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"YAML (extract service images):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "yaml-extract-images-iterative",\n  "conditions": {\n    "all": [\n      {\n        "fact": "extractValues",\n        "params": {\n          "resultFact": "composeImages",\n          "strategies": { ".yml": { "type": "yaml-jsonpath", "paths": ["$.services[*].image"] } }\n        },\n        "operator": "matchesSatisfy",\n        "value": { "requireMatches": true, "count": { "op": ">=", "value": 1 } }\n      }\n    ]\n  },\n  "event": {\n    "type": "info",\n    "params": { "message": "Extracted docker images", "details": { "fact": "composeImages" } }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"XML (extract attribute ids):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "xml-extract-ids-iterative",\n  "conditions": {\n    "all": [\n      {\n        "fact": "extractValues",\n        "params": {\n          "resultFact": "xmlServiceIds",\n          "strategies": { ".xml": { "type": "xpath", "expressions": ["//service/@id"] } }\n        },\n        "operator": "matchesSatisfy",\n        "value": { "requireMatches": true, "count": { "op": ">=", "value": 1 } }\n      }\n    ]\n  },\n  "event": {\n    "type": "info",\n    "params": { "message": "Extracted IDs", "details": { "fact": "xmlServiceIds" } }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Regex fallback (env key):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "regex-env-api-key-iterative",\n  "conditions": {\n    "all": [\n      {\n        "fact": "extractValues",\n        "params": {\n          "resultFact": "envApiKey",\n          "defaultStrategy": { "type": "regex", "pattern": "^API_KEY=(.*)$", "flags": "im" },\n          "captureContext": true\n        },\n        "operator": "matchesSatisfy",\n        "value": { "requireMatches": true, "count": { "op": ">=", "value": 1 } }\n      }\n    ]\n  },\n  "event": {\n    "type": "warning",\n    "params": { "message": "API key detected", "details": { "fact": "envApiKey" } }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"AST (import modules):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "ast-extract-imports-iterative",\n  "conditions": {\n    "all": [\n      {\n        "fact": "extractValues",\n        "params": {\n          "resultFact": "moduleImports",\n          "strategies": { ".ts": { "type": "ast-jsonpath", "paths": ["$.tree.rootNode.type"] } }\n        },\n        "operator": "matchesSatisfy",\n        "value": { "requireNoErrors": true, "count": { "op": ">=", "value": 1 } }\n      }\n    ]\n  },\n  "event": {\n    "type": "info",\n    "params": { "message": "Extracted AST info", "details": { "fact": "moduleImports" } }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"tips",children:"Tips"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Prefer JSONPath/YAML JSONPath/XPath for structured data."}),"\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"limits.maxMatches"})," to prevent excessive result sizes."]}),"\n",(0,a.jsxs)(n.li,{children:["Include the ",(0,a.jsx)(n.code,{children:"resultFact"})," in event ",(0,a.jsx)(n.code,{children:"details"})," to surface extraction results and errors in findings."]}),"\n",(0,a.jsxs)(n.li,{children:["For AST strategies, ensure ",(0,a.jsx)(n.code,{children:"xfiPluginAst"})," is enabled so the ",(0,a.jsx)(n.code,{children:"ast"})," fact is available."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);