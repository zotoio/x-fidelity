"use strict";(self.webpackChunkx_fidelity_website=self.webpackChunkx_fidelity_website||[]).push([[9088],{2486:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"examples/migration-dashboard","title":"Migration Dashboard Example","description":"This example shows how to create a dashboard to track library migration progress using x-fidelity and common visualization tools.","source":"@site/docs/examples/migration-dashboard.md","sourceDirName":"examples","slug":"/examples/migration-dashboard","permalink":"/x-fidelity/docs/examples/migration-dashboard","draft":false,"unlisted":false,"editUrl":"https://github.com/zotoio/x-fidelity/edit/main/website/docs/examples/migration-dashboard.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Jenkins Integration","permalink":"/x-fidelity/docs/ci-cd/jenkins"},"next":{"title":"Contributing","permalink":"/x-fidelity/docs/contributing"}}');var i=t(4848),r=t(8453);const o={sidebar_position:1},s="Migration Dashboard Example",l={},d=[{value:"Setup",id:"setup",level:2},{value:"1. Configure x-fidelity",id:"1-configure-x-fidelity",level:3},{value:"2. Set Up Telemetry Collection",id:"2-set-up-telemetry-collection",level:3},{value:"3. Create Data Processing Script",id:"3-create-data-processing-script",level:3},{value:"Dashboard Implementation",id:"dashboard-implementation",level:2},{value:"Using Grafana",id:"using-grafana",level:3},{value:"Example Dashboard Configuration",id:"example-dashboard-configuration",level:3},{value:"Team Progress Tracking",id:"team-progress-tracking",level:2},{value:"Automated Reports",id:"automated-reports",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"migration-dashboard-example",children:"Migration Dashboard Example"})}),"\n",(0,i.jsx)(e.p,{children:"This example shows how to create a dashboard to track library migration progress using x-fidelity and common visualization tools."}),"\n",(0,i.jsx)(e.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(e.h3,{id:"1-configure-x-fidelity",children:"1. Configure x-fidelity"}),"\n",(0,i.jsx)(e.p,{children:"Create a custom archetype for migration tracking:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'// migration-tracking.json\n{\n    "name": "migration-tracking",\n    "rules": [\n        "reactHooksMigration-global",\n        "typescriptAdoption-global",\n        "loggingFrameworkMigration-global"\n    ],\n    "operators": [\n        "globalPatternRatio",\n        "globalPatternCount"\n    ],\n    "facts": [\n        "globalFileAnalysis"\n    ],\n    "config": {\n        "minimumDependencyVersions": {\n            "react": ">=17.0.0"\n        },\n        "standardStructure": {},\n        "blacklistPatterns": [\n            ".*\\\\/\\\\..*",\n            ".*\\\\.(log|lock)$",\n            ".*\\\\/(dist|build|node_modules)(\\\\/.*|$)"\n        ],\n        "whitelistPatterns": [\n            ".*\\\\.(ts|tsx|js|jsx)$"\n        ]\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"2-set-up-telemetry-collection",children:"2. Set Up Telemetry Collection"}),"\n",(0,i.jsx)(e.p,{children:"Configure x-fidelity to send telemetry to your collection endpoint:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"xfidelity . -a migration-tracking -t https://telemetry.example.com\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3-create-data-processing-script",children:"3. Create Data Processing Script"}),"\n",(0,i.jsx)(e.p,{children:"Create a script to process the telemetry data:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// process-migration-data.js\nconst fs = require('fs');\n\n// Read telemetry data\nconst telemetryData = JSON.parse(fs.readFileSync('telemetry.json', 'utf8'));\n\n// Extract migration metrics\nconst migrations = {};\ntelemetryData.forEach(event => {\n    if (event.eventType === 'warning' && event.metadata.migrationId) {\n        const { migrationId, currentRatio, totalPatterns } = event.metadata;\n        \n        if (!migrations[migrationId]) {\n            migrations[migrationId] = [];\n        }\n        \n        migrations[migrationId].push({\n            timestamp: event.timestamp,\n            ratio: currentRatio / totalPatterns,\n            total: totalPatterns\n        });\n    }\n});\n\n// Generate dashboard data\nconst dashboardData = Object.keys(migrations).map(id => ({\n    id,\n    data: migrations[id].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)),\n    current: migrations[id].slice(-1)[0]?.ratio || 0,\n    target: id === 'react-hooks-migration' ? 0.7 : \n           id === 'typescript-adoption' ? 0.5 : 0.9\n}));\n\nfs.writeFileSync('dashboard-data.json', JSON.stringify(dashboardData, null, 2));\n"})}),"\n",(0,i.jsx)(e.h2,{id:"dashboard-implementation",children:"Dashboard Implementation"}),"\n",(0,i.jsx)(e.h3,{id:"using-grafana",children:"Using Grafana"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Set up a Grafana instance"}),"\n",(0,i.jsx)(e.li,{children:"Create a PostgreSQL or InfluxDB data source"}),"\n",(0,i.jsx)(e.li,{children:"Import the migration data"}),"\n",(0,i.jsxs)(e.li,{children:["Create a dashboard with:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Time series graphs showing migration progress"}),"\n",(0,i.jsx)(e.li,{children:"Gauge panels showing current vs target ratios"}),"\n",(0,i.jsx)(e.li,{children:"Tables showing files needing migration"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"example-dashboard-configuration",children:"Example Dashboard Configuration"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "annotations": {\n    "list": [\n      {\n        "builtIn": 1,\n        "datasource": "-- Grafana --",\n        "enable": true,\n        "hide": true,\n        "iconColor": "rgba(0, 211, 255, 1)",\n        "name": "Annotations & Alerts",\n        "type": "dashboard"\n      }\n    ]\n  },\n  "editable": true,\n  "gnetId": null,\n  "graphTooltip": 0,\n  "id": 1,\n  "links": [],\n  "panels": [\n    {\n      "datasource": null,\n      "fieldConfig": {\n        "defaults": {\n          "color": {\n            "mode": "palette-classic"\n          },\n          "custom": {\n            "axisLabel": "",\n            "axisPlacement": "auto",\n            "barAlignment": 0,\n            "drawStyle": "line",\n            "fillOpacity": 10,\n            "gradientMode": "none",\n            "hideFrom": {\n              "legend": false,\n              "tooltip": false,\n              "viz": false\n            },\n            "lineInterpolation": "linear",\n            "lineWidth": 2,\n            "pointSize": 5,\n            "scaleDistribution": {\n              "type": "linear"\n            },\n            "showPoints": "never",\n            "spanNulls": true,\n            "stacking": {\n              "group": "A",\n              "mode": "none"\n            },\n            "thresholdsStyle": {\n              "mode": "line"\n            }\n          },\n          "mappings": [],\n          "max": 1,\n          "min": 0,\n          "thresholds": {\n            "mode": "absolute",\n            "steps": [\n              {\n                "color": "red",\n                "value": null\n              },\n              {\n                "color": "yellow",\n                "value": 0.5\n              },\n              {\n                "color": "green",\n                "value": 0.7\n              }\n            ]\n          },\n          "unit": "percentunit"\n        },\n        "overrides": []\n      },\n      "gridPos": {\n        "h": 9,\n        "w": 12,\n        "x": 0,\n        "y": 0\n      },\n      "id": 2,\n      "options": {\n        "legend": {\n          "calcs": [\n            "lastNotNull",\n            "max"\n          ],\n          "displayMode": "table",\n          "placement": "bottom"\n        },\n        "tooltip": {\n          "mode": "single"\n        }\n      },\n      "pluginVersion": "8.0.6",\n      "targets": [\n        {\n          "format": "time_series",\n          "group": [],\n          "metricColumn": "none",\n          "rawQuery": true,\n          "rawSql": "SELECT\\n  timestamp AS \\"time\\",\\n  ratio\\nFROM migration_metrics\\nWHERE\\n  migration_id = \'react-hooks-migration\'\\nORDER BY timestamp",\n          "refId": "A"\n        }\n      ],\n      "title": "React Hooks Migration Progress",\n      "type": "timeseries"\n    }\n  ],\n  "refresh": false,\n  "schemaVersion": 30,\n  "style": "dark",\n  "tags": [],\n  "templating": {\n    "list": []\n  },\n  "time": {\n    "from": "now-30d",\n    "to": "now"\n  },\n  "timepicker": {},\n  "timezone": "",\n  "title": "Library Migration Dashboard",\n  "uid": "migration",\n  "version": 1\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"team-progress-tracking",children:"Team Progress Tracking"}),"\n",(0,i.jsx)(e.p,{children:"To track migration progress across different teams:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Add team information to your repository structure or configuration"}),"\n",(0,i.jsx)(e.li,{children:"Modify the telemetry collection to include team data:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'"event": {\n    "type": "warning",\n    "params": {\n        "message": "Migration in progress",\n        "metadata": {\n            "migrationId": "react-hooks-migration",\n            "team": "frontend-team-a",\n            "currentRatio": {\n                "fact": "apiMigrationAnalysis.summary.newPatternsTotal"\n            },\n            "totalPatterns": {\n                "fact": "apiMigrationAnalysis.summary.totalMatches"\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsx)(e.li,{children:"Create team-specific visualizations in your dashboard"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"automated-reports",children:"Automated Reports"}),"\n",(0,i.jsx)(e.p,{children:"Generate automated reports for stakeholders:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// generate-report.js\nconst fs = require('fs');\nconst { ChartJSNodeCanvas } = require('chartjs-node-canvas');\n\nasync function generateReport() {\n    const data = JSON.parse(fs.readFileSync('dashboard-data.json', 'utf8'));\n    \n    // Generate charts\n    const width = 800;\n    const height = 400;\n    const chartCallback = (ChartJS) => {\n        ChartJS.defaults.global.defaultFontColor = '#666';\n    };\n    const chartJSNodeCanvas = new ChartJSNodeCanvas({ width, height, chartCallback });\n    \n    for (const migration of data) {\n        const chartData = {\n            labels: migration.data.map(d => new Date(d.timestamp).toLocaleDateString()),\n            datasets: [{\n                label: `${migration.id} Progress`,\n                data: migration.data.map(d => d.ratio * 100),\n                borderColor: 'rgb(75, 192, 192)',\n                tension: 0.1\n            }]\n        };\n        \n        const configuration = {\n            type: 'line',\n            data: chartData,\n            options: {\n                scales: {\n                    y: {\n                        min: 0,\n                        max: 100,\n                        ticks: {\n                            callback: (value) => `${value}%`\n                        }\n                    }\n                },\n                plugins: {\n                    annotation: {\n                        annotations: {\n                            line1: {\n                                type: 'line',\n                                yMin: migration.target * 100,\n                                yMax: migration.target * 100,\n                                borderColor: 'rgb(255, 99, 132)',\n                                borderWidth: 2,\n                                label: {\n                                    content: `Target: ${migration.target * 100}%`,\n                                    enabled: true\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        \n        const image = await chartJSNodeCanvas.renderToBuffer(configuration);\n        fs.writeFileSync(`${migration.id}-chart.png`, image);\n    }\n    \n    // Generate HTML report\n    const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Migration Progress Report</title>\n        <style>\n            body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }\n            .chart { margin-bottom: 40px; }\n            .progress-bar { height: 30px; background-color: #f0f0f0; border-radius: 15px; overflow: hidden; margin-bottom: 10px; }\n            .progress-fill { height: 100%; background-color: #4caf50; }\n            .stats { display: flex; justify-content: space-between; }\n            table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n            th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }\n            th { background-color: #f2f2f2; }\n        </style>\n    </head>\n    <body>\n        <h1>Library Migration Progress Report</h1>\n        <p>Generated on ${new Date().toLocaleDateString()}</p>\n        \n        ${data.map(migration => `\n            <div class=\"chart\">\n                <h2>${migration.id.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</h2>\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" style=\"width: ${migration.current * 100}%\"></div>\n                </div>\n                <div class=\"stats\">\n                    <span>Current: ${(migration.current * 100).toFixed(1)}%</span>\n                    <span>Target: ${(migration.target * 100).toFixed(1)}%</span>\n                </div>\n                <img src=\"${migration.id}-chart.png\" alt=\"${migration.id} chart\" width=\"800\">\n            </div>\n        `).join('')}\n    </body>\n    </html>\n    `;\n    \n    fs.writeFileSync('migration-report.html', html);\n}\n\ngenerateReport();\n"})}),"\n",(0,i.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Set up automated report generation in your CI/CD pipeline"}),"\n",(0,i.jsx)(e.li,{children:"Create team-specific dashboards"}),"\n",(0,i.jsx)(e.li,{children:"Implement alerts for stalled migrations"}),"\n",(0,i.jsx)(e.li,{children:"Add detailed file-level reporting for developers"}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>s});var a=t(6540);const i={},r=a.createContext(i);function o(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);