"use strict";(self.webpackChunkx_fidelity_website=self.webpackChunkx_fidelity_website||[]).push([[5497],{6172:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"vscode-extension/development","title":"VSCode Extension Development","description":"This guide covers development setup, architecture, and contribution guidelines for the X-Fidelity VSCode extension.","source":"@site/docs/vscode-extension/development.md","sourceDirName":"vscode-extension","slug":"/vscode-extension/development","permalink":"/x-fidelity/docs/vscode-extension/development","draft":false,"unlisted":false,"editUrl":"https://github.com/zotoio/x-fidelity/edit/main/website/docs/vscode-extension/development.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"VSCode Extension Features","permalink":"/x-fidelity/docs/vscode-extension/features"},"next":{"title":"x-fidelity-core","permalink":"/x-fidelity/docs/packages/core"}}');var r=s(4848),t=s(8453);const o={},l="VSCode Extension Development",d={},a=[{value:"Development Setup",id:"development-setup",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Initial Setup",id:"initial-setup",level:3},{value:"Development Commands",id:"development-commands",level:3},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Package Structure",id:"package-structure",level:3},{value:"Key Components",id:"key-components",level:3},{value:"1. Extension Manager (<code>core/extensionManager.ts</code>)",id:"1-extension-manager-coreextensionmanagerts",level:4},{value:"2. Analysis Manager (<code>analysis/analysisManager.ts</code>)",id:"2-analysis-manager-analysisanalysismanagerts",level:4},{value:"3. UI Components (<code>ui/</code>)",id:"3-ui-components-ui",level:4},{value:"4. Diagnostics Provider (<code>diagnostics/</code>)",id:"4-diagnostics-provider-diagnostics",level:4},{value:"Dependencies",id:"dependencies",level:3},{value:"Core Dependencies",id:"core-dependencies",level:4},{value:"VSCode Dependencies",id:"vscode-dependencies",level:4},{value:"Build Dependencies",id:"build-dependencies",level:4},{value:"Development Workflow",id:"development-workflow",level:2},{value:"1. Making Changes",id:"1-making-changes",level:3},{value:"2. Testing",id:"2-testing",level:3},{value:"Unit Tests",id:"unit-tests",level:4},{value:"Integration Tests",id:"integration-tests",level:4},{value:"Manual Testing",id:"manual-testing",level:4},{value:"3. Performance Testing",id:"3-performance-testing",level:3},{value:"Built-in Performance Monitoring",id:"built-in-performance-monitoring",level:4},{value:"Performance Profiling",id:"performance-profiling",level:4},{value:"4. Debugging",id:"4-debugging",level:3},{value:"Debug Configuration",id:"debug-configuration",level:4},{value:"Debug Tools",id:"debug-tools",level:4},{value:"Code Patterns and Best Practices",id:"code-patterns-and-best-practices",level:2},{value:"1. Error Handling",id:"1-error-handling",level:3},{value:"2. Logging",id:"2-logging",level:3},{value:"3. Performance Monitoring",id:"3-performance-monitoring",level:3},{value:"4. Disposable Resources",id:"4-disposable-resources",level:3},{value:"Testing Guidelines",id:"testing-guidelines",level:2},{value:"1. Test Structure",id:"1-test-structure",level:3},{value:"2. Integration Tests",id:"2-integration-tests",level:3},{value:"3. Performance Tests",id:"3-performance-tests",level:3},{value:"Contributing Guidelines",id:"contributing-guidelines",level:2},{value:"1. Code Standards",id:"1-code-standards",level:3},{value:"2. Commit Messages",id:"2-commit-messages",level:3},{value:"3. Pull Request Process",id:"3-pull-request-process",level:3},{value:"4. Documentation",id:"4-documentation",level:3},{value:"Build and Distribution",id:"build-and-distribution",level:2},{value:"1. Development Build",id:"1-development-build",level:3},{value:"2. Production Build",id:"2-production-build",level:3},{value:"3. Testing Distribution",id:"3-testing-distribution",level:3},{value:"Troubleshooting Development Issues",id:"troubleshooting-development-issues",level:2},{value:"1. Extension Won&#39;t Load",id:"1-extension-wont-load",level:3},{value:"2. Tests Failing",id:"2-tests-failing",level:3},{value:"3. Performance Issues",id:"3-performance-issues",level:3},{value:"4. WASM Issues",id:"4-wasm-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"vscode-extension-development",children:"VSCode Extension Development"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers development setup, architecture, and contribution guidelines for the X-Fidelity VSCode extension."}),"\n",(0,r.jsx)(n.h2,{id:"development-setup",children:"Development Setup"}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Node.js"}),": Version 18 or higher"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Yarn"}),": For package management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"VSCode"}),": Latest stable version"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Git"}),": For version control"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"initial-setup",children:"Initial Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Clone the repository\ngit clone https://github.com/zotoio/x-fidelity.git\ncd x-fidelity\n\n# Install dependencies for all packages\nyarn install\n\n# Build all packages\nyarn build\n\n# Launch extension in debug mode\nyarn vscode:dev\n"})}),"\n",(0,r.jsx)(n.h3,{id:"development-commands",children:"Development Commands"}),"\n",(0,r.jsx)(n.p,{children:"The monorepo provides several convenient commands for extension development:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Build and launch extension in debug mode\nyarn vscode:dev\n\n# Build and launch with fresh user data (clean state)\nyarn vscode:dev:fresh\n\n# Build, launch, and watch for changes (recommended for active development)\nyarn vscode:dev:watch\n\n# Package the extension for distribution\nyarn vscode:package\n\n# Run extension tests\nyarn workspace x-fidelity-vscode test\n\n# Run specific test suites\nyarn workspace x-fidelity-vscode test:unit\nyarn workspace x-fidelity-vscode test:integration\n"})}),"\n",(0,r.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,r.jsx)(n.h3,{id:"package-structure",children:"Package Structure"}),"\n",(0,r.jsxs)(n.p,{children:["The VSCode extension is located at ",(0,r.jsx)(n.code,{children:"packages/x-fidelity-vscode/"})," and follows this structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"packages/x-fidelity-vscode/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 core/                    # Core extension logic\n\u2502   \u2502   \u251c\u2500\u2500 extensionManager.ts  # Main extension coordinator\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 analysis/               # Analysis workflow management\n\u2502   \u2502   \u251c\u2500\u2500 analysisManager.ts  # Analysis execution and coordination\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 ui/                     # User interface components\n\u2502   \u2502   \u251c\u2500\u2500 treeViews/         # Tree view providers\n\u2502   \u2502   \u251c\u2500\u2500 panels/            # Panel and webview providers\n\u2502   \u2502   \u2514\u2500\u2500 statusBar/         # Status bar items\n\u2502   \u251c\u2500\u2500 diagnostics/           # VSCode diagnostics integration\n\u2502   \u251c\u2500\u2500 reports/               # Report generation and management\n\u2502   \u251c\u2500\u2500 utils/                 # Utilities and helpers\n\u2502   \u251c\u2500\u2500 test/                  # Test files\n\u2502   \u2514\u2500\u2500 extension.ts           # Main entry point\n\u251c\u2500\u2500 package.json               # Extension manifest\n\u251c\u2500\u2500 tsconfig.json             # TypeScript configuration\n\u2514\u2500\u2500 .vscode-test.mjs          # Test configuration\n"})}),"\n",(0,r.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,r.jsxs)(n.h4,{id:"1-extension-manager-coreextensionmanagerts",children:["1. Extension Manager (",(0,r.jsx)(n.code,{children:"core/extensionManager.ts"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Main Coordinator"}),": Orchestrates all extension functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lifecycle Management"}),": Handles extension activation and deactivation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Component Integration"}),": Coordinates between UI, analysis, and core components"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Centralized error handling and recovery"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2-analysis-manager-analysisanalysismanagerts",children:["2. Analysis Manager (",(0,r.jsx)(n.code,{children:"analysis/analysisManager.ts"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Workflow Management"}),": Manages analysis execution workflows"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Progress Tracking"}),": Provides progress updates during analysis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Result Processing"}),": Handles analysis results and reporting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Monitoring"}),": Tracks analysis performance metrics"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"3-ui-components-ui",children:["3. UI Components (",(0,r.jsx)(n.code,{children:"ui/"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tree View Providers"}),": Issues tree, control center tree"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Status Bar Integration"}),": Real-time status updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Panel Providers"}),": Custom panels and webviews"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Command Handlers"}),": VSCode command implementations"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"4-diagnostics-provider-diagnostics",children:["4. Diagnostics Provider (",(0,r.jsx)(n.code,{children:"diagnostics/"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"VSCode Integration"}),": Native diagnostics integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problem Panel"}),": Issues displayed in Problems panel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inline Decorations"}),": Code highlighting and decorations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quick Fixes"}),": Suggested fixes where applicable"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,r.jsx)(n.h4,{id:"core-dependencies",children:"Core Dependencies"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@x-fidelity/core"}),": Core analysis engine"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@x-fidelity/plugins"}),": Built-in plugin system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@x-fidelity/types"}),": Shared TypeScript types"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"vscode-dependencies",children:"VSCode Dependencies"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"vscode"}),": VSCode extension API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@types/vscode"}),": TypeScript definitions for VSCode API"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"build-dependencies",children:"Build Dependencies"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"esbuild"}),": Fast bundling for extension distribution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@vscode/test-cli"}),": VSCode extension testing framework"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,r.jsx)(n.h3,{id:"1-making-changes",children:"1. Making Changes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create a feature branch\ngit checkout -b feature/your-feature-name\n\n# Make your changes to the extension code\n# Files are typically in packages/x-fidelity-vscode/src/\n\n# Test your changes\nyarn vscode:dev:watch  # This will automatically rebuild on changes\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-testing",children:"2. Testing"}),"\n",(0,r.jsx)(n.h4,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run unit tests\nyarn workspace x-fidelity-vscode test:unit\n\n# Run tests with coverage\nyarn workspace x-fidelity-vscode test:coverage\n"})}),"\n",(0,r.jsx)(n.h4,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run integration tests (requires VSCode)\nyarn workspace x-fidelity-vscode test:integration\n\n# Run all tests\nyarn workspace x-fidelity-vscode test\n"})}),"\n",(0,r.jsx)(n.h4,{id:"manual-testing",children:"Manual Testing"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Launch Debug Extension"}),": Use ",(0,r.jsx)(n.code,{children:"yarn vscode:dev"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Open Test Workspace"}),": Use ",(0,r.jsx)(n.code,{children:"packages/x-fidelity-fixtures/node-fullstack"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test Features"}),": Exercise extension functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check Output"}),": Monitor X-Fidelity Debug output channel"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-performance-testing",children:"3. Performance Testing"}),"\n",(0,r.jsx)(n.h4,{id:"built-in-performance-monitoring",children:"Built-in Performance Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Monitor performance during development\n# Use these commands in the Extension Development Host:\n# - X-Fidelity: Show Performance Report\n# - X-Fidelity: Show WASM Status\n# - X-Fidelity: Worker Statistics\n"})}),"\n",(0,r.jsx)(n.h4,{id:"performance-profiling",children:"Performance Profiling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Chrome DevTools"}),": Use ",(0,r.jsx)(n.code,{children:"Help > Toggle Developer Tools"})," in Extension Development Host"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Built-in Metrics"}),": Monitor timing and memory usage through extension APIs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Analysis Timing"}),": Track analysis operation performance"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-debugging",children:"4. Debugging"}),"\n",(0,r.jsx)(n.h4,{id:"debug-configuration",children:"Debug Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The extension includes comprehensive debug configurations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Launch configuration is in .vscode/launch.json\n{\n  "name": "Launch Extension",\n  "type": "extensionHost",\n  "request": "launch",\n  "runtimeExecutable": "${execPath}",\n  "args": ["--extensionDevelopmentPath=${workspaceFolder}/packages/x-fidelity-vscode"]\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"debug-tools",children:"Debug Tools"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Breakpoints"}),": Set breakpoints in TypeScript source files"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Console Logging"}),": Use the extension's logger for structured logging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Output Channels"}),": Monitor multiple output channels for different types of information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Developer Tools"}),": Access Chrome DevTools for web-based debugging"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"code-patterns-and-best-practices",children:"Code Patterns and Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-error-handling",children:"1. Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"Use consistent error handling patterns:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"try {\n  await performOperation();\n  logger.info('Operation completed successfully');\n} catch (error) {\n  const errorMessage = error instanceof Error ? error.message : String(error);\n  logger.error('Operation failed', { error: errorMessage });\n  \n  // Show user-friendly error message\n  vscode.window.showErrorMessage(\n    `Operation failed: ${errorMessage}`,\n    'Show Details'\n  ).then(choice => {\n    if (choice === 'Show Details') {\n      vscode.commands.executeCommand('workbench.action.output.toggleOutput');\n    }\n  });\n  \n  throw error;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-logging",children:"2. Logging"}),"\n",(0,r.jsx)(n.p,{children:"Use structured logging for better debugging:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { logger } from '../utils/logger';\n\n// Good: Structured logging with context\nlogger.info('Analysis started', { \n  workspace: workspace.name,\n  archetype: config.archetype,\n  fileCount: files.length \n});\n\n// Good: Error logging with details\nlogger.error('Analysis failed', { \n  error: error.message,\n  stack: error.stack,\n  operation: 'file-analysis'\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-performance-monitoring",children:"3. Performance Monitoring"}),"\n",(0,r.jsx)(n.p,{children:"Wrap operations with performance monitoring:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await performanceMonitor.timeOperation('operationName', async () => {\n  // Your operation here\n  await performLongRunningTask();\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-disposable-resources",children:"4. Disposable Resources"}),"\n",(0,r.jsx)(n.p,{children:"Properly manage disposable resources:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export class MyComponent implements vscode.Disposable {\n  private disposables: vscode.Disposable[] = [];\n  \n  constructor() {\n    // Register disposables\n    this.disposables.push(\n      vscode.commands.registerCommand('my.command', this.handleCommand)\n    );\n  }\n  \n  dispose(): void {\n    this.disposables.forEach(d => d.dispose());\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-guidelines",children:"Testing Guidelines"}),"\n",(0,r.jsx)(n.h3,{id:"1-test-structure",children:"1. Test Structure"}),"\n",(0,r.jsx)(n.p,{children:"Organize tests following this pattern:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// packages/x-fidelity-vscode/src/test/suite/component.test.ts\nimport * as assert from 'assert';\nimport * as vscode from 'vscode';\n\nsuite('Component Test Suite', () => {\n  \n  setup(async () => {\n    // Setup before each test\n  });\n  \n  teardown(async () => {\n    // Cleanup after each test\n  });\n  \n  test('should perform expected behavior', async () => {\n    // Test implementation\n    assert.strictEqual(actual, expected);\n  });\n  \n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-integration-tests",children:"2. Integration Tests"}),"\n",(0,r.jsx)(n.p,{children:"Use the test workspace for integration tests:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Test against the fixture workspace\nconst workspaceUri = vscode.Uri.file('/path/to/x-fidelity-fixtures/node-fullstack');\nawait vscode.commands.executeCommand('vscode.openFolder', workspaceUri);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-performance-tests",children:"3. Performance Tests"}),"\n",(0,r.jsx)(n.p,{children:"Include performance assertions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"test('analysis should complete within reasonable time', async () => {\n  const startTime = performance.now();\n  await analysisManager.runAnalysis();\n  const duration = performance.now() - startTime;\n  \n  assert.ok(duration < 30000, `Analysis took too long: ${duration}ms`);\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"contributing-guidelines",children:"Contributing Guidelines"}),"\n",(0,r.jsx)(n.h3,{id:"1-code-standards",children:"1. Code Standards"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TypeScript"}),": Use strict TypeScript configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ESLint"}),": Follow the project's ESLint configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prettier"}),": Use Prettier for code formatting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Comments"}),": Document complex logic and public APIs"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-commit-messages",children:"2. Commit Messages"}),"\n",(0,r.jsx)(n.p,{children:"Follow conventional commit format:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"feat(vscode): add new analysis tree view\nfix(vscode): resolve memory leak in analysis manager\ndocs(vscode): update development guide\ntest(vscode): add integration tests for diagnostics\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-pull-request-process",children:"3. Pull Request Process"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create Feature Branch"}),": From ",(0,r.jsx)(n.code,{children:"master"})," branch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Make Changes"}),": Implement feature or fix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Tests"}),": Include appropriate test coverage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update Documentation"}),": Update relevant documentation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test Thoroughly"}),": Run all tests and manual testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Submit PR"}),": With clear description and test instructions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-documentation",children:"4. Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code Comments"}),": Document complex algorithms and business logic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"README Updates"}),": Update package README if needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Website Docs"}),": Update website documentation for user-facing changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Changelog"}),": Include changes in package changelog"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"build-and-distribution",children:"Build and Distribution"}),"\n",(0,r.jsx)(n.h3,{id:"1-development-build",children:"1. Development Build"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Build for development\nyarn workspace x-fidelity-vscode build\n\n# Build with watch mode\nyarn workspace x-fidelity-vscode build:watch\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-production-build",children:"2. Production Build"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Build for production\nyarn workspace x-fidelity-vscode build:prod\n\n# Package for distribution\nyarn vscode:package\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-testing-distribution",children:"3. Testing Distribution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create package\nyarn vscode:package\n\n# Install locally for testing\ncode --install-extension packages/x-fidelity-vscode/x-fidelity-vscode-*.vsix\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting-development-issues",children:"Troubleshooting Development Issues"}),"\n",(0,r.jsx)(n.h3,{id:"1-extension-wont-load",children:"1. Extension Won't Load"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check Dependencies"}),": Ensure all packages are built (",(0,r.jsx)(n.code,{children:"yarn build"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check Logs"}),": Review Extension Development Host console"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reset State"}),": Try ",(0,r.jsx)(n.code,{children:"yarn vscode:dev:fresh"})," for clean state"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-tests-failing",children:"2. Tests Failing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update Fixtures"}),": Ensure test fixtures are up to date"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check VSCode Version"}),": Verify compatibility with your VSCode version"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean Build"}),": Run ",(0,r.jsx)(n.code,{children:"yarn clean && yarn build"})," and retry"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-performance-issues",children:"3. Performance Issues"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Profile Operations"}),": Use built-in performance monitoring"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check Memory"}),": Monitor memory usage patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optimize Patterns"}),": Review file exclusion patterns"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-wasm-issues",children:"4. WASM Issues"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check Status"}),": Use ",(0,r.jsx)(n.code,{children:"X-Fidelity: Show WASM Status"})," command"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Review Logs"}),": Check for WASM initialization errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fallback Mode"}),": Verify fallback mechanisms work correctly"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/x-fidelity/docs/vscode-extension/features",children:"Features Overview"})," - Understanding extension capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/x-fidelity/docs/local-config",children:"Configuration Guide"})," - Advanced configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/x-fidelity/docs/plugins/overview",children:"Plugin Development"})," - Creating custom plugins"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/x-fidelity/docs/contributing",children:"Contributing Guidelines"})," - General contribution guidelines"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);